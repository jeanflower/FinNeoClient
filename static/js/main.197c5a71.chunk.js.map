{"version":3,"sources":["views/cat.png","utils.ts","views/reactComponents/Button.tsx","localization/stringConstants.ts","views/loginPage.tsx","database/REST_db.ts","database/database.ts","database/loadSaveModel.ts","contexts/auth0-context.js","views/reactComponents/Input.jsx","views/reactComponents/AddDeleteEntryForm.tsx","App.tsx","views/reactComponents/DataGrid.tsx","views/reactComponents/SimpleFormatter.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","doLog","log","obj","console","Button","props","className","spacer","type","onClick","action","id","title","homeView","lc","navbarContent","rhContent","Navbar","expand","bg","sticky","Brand","href","src","FinNeoCat","alt","width","height","toggle","url","process","makeBlankFood","foodName","amount","unit","name","quantity","NaN","details","calories","proteinWeight","vegWeight","carbsWeight","fatsWeight","parts","restdb","userID","myHeaders","Headers","append","Promise","resolve","reject","requestOptions","method","headers","redirect","address","fetch","then","response","text","result","parsedResult","JSON","parse","map","f","data","version","err","makeFood","food","catch","error","callback","urlencoded","URLSearchParams","body","getDB","getFoodsDB","a","foods","getFoods","alert","addFoodDB","addFood","stringify","allFoods","find","x","deleteFoodDB","deleteFood","updateFoodDB","updateFood","Auth0Context","createContext","Auth0Provider","state","auth0Client","isLoading","isAuthenticated","user","config","domain","client_id","redirect_uri","window","location","origin","initializeAuth0","createAuth0Client","setState","search","includes","handleRedirectCallback","getUser","history","replaceState","document","pathname","this","children","configObject","loginWithRedirect","loginForTesting","sub","getTokenSilently","getIdTokenClaims","logout","Provider","value","Component","InputRow","htmlFor","onChange","onSubmit","onBlur","placeholder","reactAppComponent","AddFoodForm","units","partNameWIP","partUnitWIP","partQuantityWIP","handleName","bind","handleUnits","handleQuantity","handleCalories","handleProteinWeight","handleVegWeight","handleCarbsWeight","handleFatsWeight","handlePartNameWIP","handlePartUnitWIP","handlePartQuantityWIP","add","addPart","delParts","e","target","preventDefault","push","unitsInput","matchedFoods","filter","length","quantityInput","matchedQty","submitFunction","getUnits","parseFloat","getQuantity","p","showAlert","AddFoodButtonForm","buttonName","primary","key","persist","sort","b","aHasParts","bHasParts","toLowerCase","includedAlready","undefined","makeButton","makeButtons","DelFoodForm","del","DelFoodButtonForm","DataGrid","rows","colSortIndex","sortDirection","i","index","aVal","bVal","columns","aTimeVal","Date","getTime","bTimeVal","aIsDate","Number","isNaN","bIsDate","toUpperCase","sortColumn","column","row","showDel","icon","confirm","deleteFunction","viewFunction","showCopy","copyFunction","rowGetter","rowsCount","onGridRowsUpdated","handleGridRowsUpdated","minHeight","enableCellSelect","enableRowSelect","onGridSort","sortHandler","getCellActions","React","SimpleFormatter","OverlayTrigger","placement","overlay","Tooltip","getUserID","alertText","filterFoods","focusFood","views","keys","k","view","get","display","refreshData","Map","makeDirectNum","val","handleFoodRowUpdated","parentFood","args","oldFoodRow","newEntry","protein","veg","carbs","fats","match","updateFromTable","fromRowData","updated","AppContent","defaultColumn","editable","resizable","sortable","displayFoods","displayFoods2","focusFood2","refreshFoods","Toggle","aria-controls","Collapse","Nav","Form","inline","statusButtonList","rhsTopButtonList","counter","matchingFood","makeTableNumber","total","forEach","makeTableNumberForPart","isDirect","n","tot","arguments","HAS_PARTS","makeTableString","makeTableStringForPart","lessThan","formatter","Accordion","Card","Header","as","eventKey","Container","foodsTable","inputName","prompt","newFood","buttons","event","logOutAction","navbarDiv","homeDiv","internalErrorDiv","concat","makeHelpText","messageText","App","useContext","returnTo","loginPage","Boolean","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,iC,0NCAvCC,GAAQ,EACL,SAASC,EAAIC,GACdF,GAGFG,QAAQF,IAAIC,GCKhB,IA0BeE,EA1BA,SAACC,GACd,IAAIC,EAAY,GACVC,EAAS,aAYf,OAVED,EADiB,YAAfD,EAAMG,KACC,yBAAqBD,GACN,gBAAfF,EAAMG,KACN,iCAA6BD,GACd,iBAAfF,EAAMG,KACN,2BAAuBD,GACR,cAAfF,EAAMG,KACN,mCAA+BD,GAE/B,uBAAmBA,GAG5B,4BACEE,QAASJ,EAAMK,OACfC,GAAIN,EAAMM,GACVH,KAAqB,YAAfH,EAAMG,KAAqB,SAAW,SAC5CF,UAAWA,GAEVD,EAAMO,Q,yBC3BAC,EAAqB,CAAEC,GAAI,QCGjC,SAASC,EAAcC,GAC5B,OACE,kBAACC,EAAA,EAAD,CAAQC,OAAO,KAAKC,GAAG,QAAQC,OAAO,OACpC,kBAACH,EAAA,EAAOI,MAAR,CAAcC,KAAK,QAAQX,GAAG,gBAC5B,yBAAKL,UAAU,eACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACb,uCAEF,yBAAKA,UAAU,OACb,yBACEiB,IAAKC,IACLC,IAAI,aACJC,MAAO,GACPC,OAAQ,OACRlB,QAAS,WACPmB,GAAOf,IAETF,GAAG,iBAMZK,KC5BP,IAAMa,EAAMC,sDAIZ,SAASC,EACPC,GAEA,MAAO,CACLA,SAAUA,EACVC,OAAQ,CACNC,KAAM,CACJC,KAAM,WAERC,SAAUC,KAEZC,QAAS,CACPC,SAAUF,IACVG,cAAeH,IACfI,UAAWJ,IACXK,YAAaL,IACbM,WAAYN,KAEdO,MAAO,IAqEJ,IC3FDC,EAAS,ID2Ff,iGACWC,GAIP,IAAMC,EAAY,IAAIC,QAGtB,OAFAD,EAAUE,OAAO,eAAgB,qCAE1B,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAIF,CACFC,OAAQ,MACRC,QAASR,EACTS,SAAU,UAENC,EAAO,UAAM5B,EAAN,wBAAyBiB,GAEtC,OAAOY,MAAMD,EAASJ,GACnBM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAEJ,IACE,IAAMC,EAGAC,KAAKC,MAAMH,GAGjBX,EAAQY,EAAaG,KAAI,SAACC,GAGxB,OA7Dd,SACEnC,EACAoC,GAEA,IAEE,IAAMlE,EAAM8D,KAAKC,MAAMG,GAEvB,OAtE0B,IAsEvBlE,EAAImE,QACE,CACLrC,SAAUA,EACVC,OAAQ/B,EAAI+B,OACZK,QAASpC,EAAIoC,QACbM,MAAO1C,EAAI0C,QAGbzC,QAAQF,IAAR,4BACO8B,EAAcC,IAGvB,MAAMsC,GAEN,OADAnE,QAAQF,IAAR,8BAAmCqE,IAC5BvC,EAAcC,IAsCUuC,CAASJ,EAAEnC,SAAUmC,EAAEK,UAG9C,MAAOF,GACPlB,EAAO,oBAGVqB,OAAM,SAAAC,GACLvE,QAAQF,IAAI,QAASyE,GACrBtB,EAAOsB,WA1CjB,8BAgDI5B,EACAd,EACAwC,EACAG,GAEA,IAAI5B,EAAY,IAAIC,QACpBD,EAAUE,OAAO,eAAgB,qCAEjC,IAAI2B,EAAa,IAAIC,gBACrBD,EAAW3B,OAAO,SAAUH,GAC5B8B,EAAW3B,OAAO,WAAYjB,GAC9B4C,EAAW3B,OAAO,OAAQuB,GAE1B,IAAInB,EAKA,CACFC,OAAQ,OACRC,QAASR,EACT+B,KAAMF,EACNpB,SAAU,UAGZE,MAAM,GAAD,OAAI7B,EAAJ,eAAsBwB,GACxBM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAM,OAAI3D,QAAQF,IAAI6D,MAC3BH,KAAKgB,GACLF,OAAM,SAAAC,GAAK,OAAIvE,QAAQF,IAAI,QAASyE,QA7E3C,iCAiFI5B,EACAd,EACA2C,GAEA,IAAI5B,EAAY,IAAIC,QACpBD,EAAUE,OAAO,eAAgB,qCAEjC,IAAI2B,EAAa,IAAIC,gBACrBD,EAAW3B,OAAO,SAAUH,GAC5B8B,EAAW3B,OAAO,WAAYjB,GAE9B,IAAIqB,EAKA,CACFC,OAAQ,SACRC,QAASR,EACT+B,KAAMF,EACNpB,SAAU,UAGZE,MAAM,GAAD,OAAI7B,EAAJ,eAAsBwB,GACxBM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAM,OAAI3D,QAAQF,IAAI6D,MAC3BH,KAAKgB,GACLF,OAAM,SAAAC,GAAK,OAAIvE,QAAQF,IAAI,QAASyE,QA5G3C,iCAgHI5B,EACAd,EACAwC,EACAG,GAEA,IAAI5B,EAAY,IAAIC,QACpBD,EAAUE,OAAO,eAAgB,qCAEjC,IAAI2B,EAAa,IAAIC,gBACrBD,EAAW3B,OAAO,SAAUH,GAC5B8B,EAAW3B,OAAO,WAAYjB,GAC9B4C,EAAW3B,OAAO,OAAQuB,GAc1Bd,MAAM,2CAPF,CACFJ,OAAQ,MACRC,QAASR,EACT+B,KAAMF,EACNpB,SAAU,WAITG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAM,OAAI3D,QAAQF,IAAI6D,MAC3BH,KAAKgB,GACLF,OAAM,SAAAC,GAAK,OAAIvE,QAAQF,IAAI,QAASyE,UA7I3C,MCzFO,SAASK,IACd,OAAOlC,E,SCEMmC,E,8EAAf,WAA0BlC,GAA1B,eAAAmC,EAAA,6DAIMC,EAAgB,GAJtB,kBAMkBH,IAAQI,SAASrC,GANnC,OAMIoC,EANJ,uDAQIE,MAAM,6BAAD,cART,iCAaSF,GAbT,0D,sBAgBO,SAAeC,EAAtB,kC,4CAAO,WAAwBrC,GAAxB,eAAAmC,EAAA,sEACeD,EAAWlC,GAD1B,cACCoC,EADD,yBAEEA,GAFF,4C,+BAKQG,E,kFAAf,WACEvC,EACA0B,EACAG,GAHF,SAAAM,EAAA,+EASUF,IAAQO,QACZxC,EACA0B,EAAKxC,SACLgC,KAAKuB,UAAU,CACbtD,OAAQuC,EAAKvC,OACbK,QAASkC,EAAKlC,QACdM,MAAO4B,EAAK5B,MACZyB,QFxCsB,IE0CxBM,GAlBN,8DAqBIS,MAAM,6BAAD,cArBT,mBAsBW,GAtBX,kCA2BS,GA3BT,0D,sBA+BO,SAAeE,EAAtB,wC,4CAAO,WACLxC,EACA0B,EACAgB,EACAb,GAJK,eAAAM,EAAA,0DAMFO,EAASC,MAAK,SAACC,GAChB,OAAOA,EAAE1D,WAAawC,EAAKxC,YAPxB,uBASHoD,MAAM,kBAAD,OAAmBZ,EAAKxC,SAAxB,oBATF,mBAUI,GAVJ,uBAYgBqD,EAAUvC,EAAQ0B,EAAMG,GAZxC,cAYCb,EAZD,yBAaEA,GAbF,4C,+BAgBQ6B,E,kFAAf,WACE7C,EACAd,EACA2C,GAHF,SAAAM,EAAA,+EASUF,IAAQa,WAAW9C,EAAQd,EAAU2C,GAT/C,sDAWIS,MAAM,6BAAD,cAXT,2F,sBAoBO,SAAeQ,EAAtB,sC,4CAAO,WACL9C,EACAd,EACA2C,GAHK,SAAAM,EAAA,sEAKCU,EAAa7C,EAAQd,EAAU2C,GALhC,6E,+BASQkB,E,kFAAf,WACE/C,EACA0B,EACAG,GAHF,SAAAM,EAAA,+EASUF,IAAQe,WACZhD,EACA0B,EAAKxC,SACLgC,KAAKuB,UAAU,CACbtD,OAAQuC,EAAKvC,OACbK,QAASkC,EAAKlC,QACdM,MAAO4B,EAAK5B,MACZyB,QFpHsB,IEsHxBM,GAlBN,sDAoBIS,MAAM,6BAAD,cApBT,2F,sBA6BO,SAAeU,EAAtB,sC,4CAAO,WACLhD,EACA0B,EACAG,GAHK,SAAAM,EAAA,sEAKCY,EAAa/C,EAAQ0B,EAAMG,GAL5B,6E,kFCjIDoB,EAAeC,0BAORC,EAAb,4MACEC,MAAQ,CACNC,YAAa,KACbC,WAAW,EACXC,iBAAiB,EACjBC,KAAM,MALV,EAOEC,OAAS,CACPC,OAAQ1E,4BACR2E,UAAW3E,mCACX4E,aACEC,OAAOC,SAASC,OAAS/E,8BAX/B,EAmBEgF,gBAnBF,sBAmBoB,gCAAA7B,EAAA,sEAIU8B,YAAkB,EAAKR,QAJjC,UAIVJ,EAJU,OAKhB,EAAKa,SAAS,CAAEb,iBAGZQ,OAAOC,SAASK,OAAOC,SAAS,SARpB,yCASP,EAAKC,0BATE,uBAYchB,EAAYE,kBAZ1B,YAYVA,EAZU,0CAaqBF,EAAYiB,UAbjC,iDAa6C,KAb7C,QAaVd,EAbU,KAchB,EAAKU,SAAS,CAAEZ,WAAW,EAAOC,kBAAiBC,SAdnC,4CAnBpB,EAoCEa,uBApCF,sBAoC2B,4BAAAlC,EAAA,6DACvB,EAAK+B,SAAS,CAAEZ,WAAW,IADJ,SAGjB,EAAKF,MAAMC,YAAYgB,yBAHN,uBAIJ,EAAKjB,MAAMC,YAAYiB,UAJnB,OAIjBd,EAJiB,OAMvB,EAAKU,SAAS,CAAEV,OAAMD,iBAAiB,EAAMD,WAAW,IACxDO,OAAOU,QAAQC,aAAa,GAAIC,SAAS3G,MAAO+F,OAAOC,SAASY,UAPzC,2CApC3B,kEAeIC,KAAKX,oBAfT,+BA8CY,IAAD,SACmDW,KAAKvB,MAAvDC,EADD,EACCA,YAAaC,EADd,EACcA,UAAWC,EADzB,EACyBA,gBAAiBC,EAD1C,EAC0CA,KACzCoB,EAAaD,KAAKpH,MAAlBqH,SAEFC,EAAe,CACnBvB,YACAC,kBACAC,OACAsB,kBAAmB,kBAAUzB,EAAYyB,kBAAZ,MAAAzB,EAAW,YACxC0B,gBAAiB,WAIf,EAAKb,SAAS,CACZV,KAAM,CAAEwB,IAAK,cACbzB,iBAAiB,EACjBD,WAAW,KAGf2B,iBAAkB,kBAAU5B,EAAY4B,iBAAZ,MAAA5B,EAAW,YACvC6B,iBAAkB,kBAAU7B,EAAY6B,iBAAZ,MAAA7B,EAAW,YACvC8B,OAAQ,kBAAU9B,EAAY8B,OAAZ,MAAA9B,EAAW,aAG/B,OACE,kBAACJ,EAAamC,SAAd,CAAuBC,MAAOR,GAC3BD,OAxET,GAAmCU,aCWtBC,GAAW,SAAAhI,GAEtB,OACI,yBAAKC,UAAU,kBACf,2BAAOgI,QAASjI,EAAM8B,KAAM7B,UAAU,yBACnCD,EAAMO,OAET,yBAAKN,UAAU,UACf,2BACEA,UAAU,eACVK,GAAIN,EAAM8B,KACVA,KAAM9B,EAAM8B,KACZ3B,KAAMH,EAAMG,KACZ2H,MAAO9H,EAAM8H,MACbI,SAAUlI,EAAMkI,SAChBC,SAAUnI,EAAMmI,SAChBC,OAAQpI,EAAMoI,OACdC,YAAarI,EAAMqI,iBCOpB,ICqBHC,GDrBSC,GAAb,kDACE,WAAmBvI,GAAsB,IAAD,8BACtC,cAAMA,IAKD6F,MAtBA,CACL2C,MAAO,GACP1G,KAAM,GACNC,SAAU,GACVG,SAAU,GACVC,cAAe,GACfC,UAAW,GACXC,YAAa,GACbC,WAAY,GACZmG,YAAa,GACbC,YAAa,GACbC,gBAAiB,GACjBpG,MAAO,IAYP,EAAKqG,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKE,eAAiB,EAAKA,eAAeF,KAApB,gBACtB,EAAKG,eAAiB,EAAKA,eAAeH,KAApB,gBACtB,EAAKI,oBAAsB,EAAKA,oBAAoBJ,KAAzB,gBAC3B,EAAKK,gBAAkB,EAAKA,gBAAgBL,KAArB,gBACvB,EAAKM,kBAAoB,EAAKA,kBAAkBN,KAAvB,gBACzB,EAAKO,iBAAmB,EAAKA,iBAAiBP,KAAtB,gBACxB,EAAKQ,kBAAoB,EAAKA,kBAAkBR,KAAvB,gBACzB,EAAKS,kBAAoB,EAAKA,kBAAkBT,KAAvB,gBACzB,EAAKU,sBAAwB,EAAKA,sBAAsBV,KAA3B,gBAC7B,EAAKW,IAAM,EAAKA,IAAIX,KAAT,gBACX,EAAKY,QAAU,EAAKA,QAAQZ,KAAb,gBACf,EAAKa,SAAW,EAAKA,SAASb,KAAd,gBArBsB,EAD1C,qDA4BI,OACE,oCACA,4CACA,0BAAM5I,UAAU,kBAAkBkI,SAAUf,KAAKoC,KAC/C,kBAAC,GAAD,CACEjJ,MAAK,OACLJ,KAAM,OACN2B,KAAI,cACJgG,MAAOV,KAAKvB,MAAM/D,KAClBuG,YAAa,OACbH,SAAUd,KAAKwB,aAEjB,kBAAC,GAAD,CACErI,MAAK,WACLJ,KAAM,OACN2B,KAAI,kBACJgG,MAAOV,KAAKvB,MAAM9D,SAClBsG,YAAa,WACbH,SAAUd,KAAK2B,iBAEjB,kBAAC,GAAD,CACExI,MAAK,QACLJ,KAAM,OACN2B,KAAI,eACJgG,MAAOV,KAAKvB,MAAM2C,MAClBH,YAAa,QACbH,SAAUd,KAAK0B,cAEjB,kBAAC,GAAD,CACEvI,MAAK,WACLJ,KAAM,OACN2B,KAAI,kBACJgG,MAAOV,KAAKvB,MAAM3D,SAClBmG,YAAa,WACbH,SAAUd,KAAK4B,iBAEjB,kBAAC,GAAD,CACEzI,MAAK,UACLJ,KAAM,OACN2B,KAAI,iBACJgG,MAAOV,KAAKvB,MAAM1D,cAClBkG,YAAa,UACbH,SAAUd,KAAK6B,sBAEjB,kBAAC,GAAD,CACE1I,MAAK,MACLJ,KAAM,OACN2B,KAAI,aACJgG,MAAOV,KAAKvB,MAAMzD,UAClBiG,YAAa,MACbH,SAAUd,KAAK8B,kBAEjB,kBAAC,GAAD,CACE3I,MAAK,QACLJ,KAAM,OACN2B,KAAI,eACJgG,MAAOV,KAAKvB,MAAMxD,YAClBgG,YAAa,QACbH,SAAUd,KAAK+B,oBAEjB,kBAAC,GAAD,CACE5I,MAAK,OACLJ,KAAM,OACN2B,KAAI,cACJgG,MAAOV,KAAKvB,MAAMvD,WAClB+F,YAAa,OACbH,SAAUd,KAAKgC,mBAEhBzF,KAAKuB,UAAUkC,KAAKvB,MAAMtD,OAC3B,kBAAC,GAAD,CACEhC,MAAK,YACLJ,KAAM,OACN2B,KAAI,iBACJgG,MAAOV,KAAKvB,MAAM4C,YAClBJ,YAAa,YACbH,SAAUd,KAAKiC,oBAEjB,kBAAC,GAAD,CACE9I,MAAK,gBACLJ,KAAM,OACN2B,KAAI,gBACJgG,MAAOV,KAAKvB,MAAM8C,gBAClBN,YAAa,gBACbH,SAAUd,KAAKmC,wBAEjB,kBAAC,GAAD,CACEhJ,MAAK,YACLJ,KAAM,OACN2B,KAAI,iBACJgG,MAAOV,KAAKvB,MAAM6C,YAClBL,YAAa,aACbH,SAAUd,KAAKkC,oBAEjB,kBAAC,IAAD,CACElJ,QAASgH,KAAKqC,QACdtJ,KAAM,UACNG,GAAG,eAHL,mBAKA,kBAAC,IAAD,CACEF,QAASgH,KAAKsC,SACdvJ,KAAM,UACNG,GAAG,eAHL,sBAKA,4BACA,kBAAC,IAAD,CACEF,QAASgH,KAAKoC,IACdrJ,KAAM,UACNG,GAAG,WAHL,qEApIR,iCA6IqBqJ,GACjB,IAAM7B,EAAQ6B,EAAEC,OAAO9B,MACvBV,KAAKT,SAAS,CAAE7E,KAAMgG,MA/I1B,kCAiJsB6B,GAClB,IAAM7B,EAAQ6B,EAAEC,OAAO9B,MACvBV,KAAKT,SAAS,CAAE6B,MAAOV,MAnJ3B,qCAqJyB6B,GACrB,IAAM7B,EAAQ6B,EAAEC,OAAO9B,MACvBV,KAAKT,SAAS,CAAE5E,SAAU+F,MAvJ9B,qCAyJyB6B,GACrB,IAAM7B,EAAQ6B,EAAEC,OAAO9B,MACvBV,KAAKT,SAAS,CAAEzE,SAAU4F,MA3J9B,0CA6J8B6B,GAC1B,IAAM7B,EAAQ6B,EAAEC,OAAO9B,MACvBV,KAAKT,SAAS,CAAExE,cAAe2F,MA/JnC,sCAiK0B6B,GACtB,IAAM7B,EAAQ6B,EAAEC,OAAO9B,MACvBV,KAAKT,SAAS,CAAEvE,UAAW0F,MAnK/B,wCAqK4B6B,GACxB,IAAM7B,EAAQ6B,EAAEC,OAAO9B,MACvBV,KAAKT,SAAS,CAAEtE,YAAayF,MAvKjC,uCAyK2B6B,GACvB,IAAM7B,EAAQ6B,EAAEC,OAAO9B,MACvBV,KAAKT,SAAS,CAAErE,WAAYwF,MA3KhC,wCA6K4B6B,GACxB,IAAM7B,EAAQ6B,EAAEC,OAAO9B,MACvBV,KAAKT,SAAS,CAAE8B,YAAaX,MA/KjC,wCAiL4B6B,GACxB,IAAM7B,EAAQ6B,EAAEC,OAAO9B,MACvBV,KAAKT,SAAS,CAAE+B,YAAaZ,MAnLjC,4CAqLgC6B,GAC5B,IAAM7B,EAAQ6B,EAAEC,OAAO9B,MACvBV,KAAKT,SAAS,CAAEgC,gBAAiBb,MAvLrC,uEAyLwB6B,GAzLxB,uEA0LIA,EAAEE,kBACItH,EAAQ6E,KAAKvB,MAAMtD,OACnBuH,KAAK,CACThI,KAAMsF,KAAKvB,MAAM4C,YACjBD,MAAOpB,KAAKvB,MAAM6C,YAClB3G,SAAUqF,KAAKvB,MAAM8C,kBAEvBvB,KAAKT,SAAS,CACZpE,MAAOA,EACPkG,YAAa,GACbC,YAAa,GACbC,gBAAiB,KArMvB,+KAwMyBgB,GAxMzB,iEAyMIA,EAAEE,iBACFzC,KAAKT,SAAS,CACZpE,MAAO,KA3Mb,sIA+MIwH,EACApI,EACAwD,GAEA,IAAIqD,EAAQuB,EAEZ,GADAjK,QAAQF,IAAR,0BAA+B+B,EAA/B,uBAAsD6G,IACpC,KAAfuB,EAAkB,CACnBvB,EAAQ,cAER,IAAMwB,EAAe7E,EAAS8E,QAAO,SAACnG,GACpC,OAAOA,EAAEnC,WAAaA,KAExB,GAA2B,IAAxBqI,EAAaE,OAGd1B,EAFoBwB,EAAa,GAAGpI,OAAOC,KAAKC,KAKpD,OAAO0G,IAjOX,kCAoOI2B,EACAxI,EACAwD,GAEA,IAAIpD,EAAWoI,EAEf,GADArK,QAAQF,IAAR,wBAA6B+B,EAA7B,gBAA6CwI,IACxB,KAAlBA,EAAqB,CACtBpI,EAAW,IAEX,IAAMiI,EAAe7E,EAAS8E,QAAO,SAACnG,GACpC,OAAOA,EAAEnC,WAAaA,KAExB,GAA2B,IAAxBqI,EAAaE,OAAa,CAC3B,IAAME,EAAaJ,EAAa,GAAGpI,OAAOG,SAE1CA,EAAQ,UAAMqI,IAGlB,OAAOrI,IAtPX,mEAwPoB4H,GAxPpB,+EAyPIA,EAAEE,iBAEqB,KAApBzC,KAAKvB,MAAM/D,KA3PlB,uBA4PMiD,MAAM,uBA5PZ,0CAiQUqC,KAAKpH,MAAMqK,eACf,CACE1I,SAAUyF,KAAKvB,MAAM/D,KACrBF,OAAQ,CACNC,KAAK,CACHC,KAAOsF,KAAKkD,SAASlD,KAAKvB,MAAM2C,MAAOpB,KAAKvB,MAAM/D,KAAMsF,KAAKpH,MAAMmF,WAErEpD,SAAUwI,WAAWnD,KAAKoD,YAAYpD,KAAKvB,MAAM9D,SAAUqF,KAAKvB,MAAM/D,KAAMsF,KAAKpH,MAAMmF,YAEzFlD,QAAS,CACPC,SAAUqI,WAAWnD,KAAKvB,MAAM3D,UAChCC,cAAeoI,WAAWnD,KAAKvB,MAAM1D,eACrCC,UAAWmI,WAAWnD,KAAKvB,MAAMzD,WACjCC,YAAakI,WAAWnD,KAAKvB,MAAMxD,aACnCC,WAAYiI,WAAWnD,KAAKvB,MAAMvD,aAEpCC,MAAO6E,KAAKvB,MAAMtD,MAAMsB,KAAI,SAAC4G,GAE3B,MAAO,CACL9I,SAAU8I,EAAE3I,KACZF,OAAQ,CACNC,KAAM,CACJC,KAAM,EAAKwI,SAASG,EAAEjC,MAAOiC,EAAE3I,KAAM,EAAK9B,MAAMmF,WAElDpD,SAAUwI,WAAW,EAAKC,YAAYC,EAAE1I,SAAU0I,EAAE3I,KAAM,EAAK9B,MAAMmF,YAEvElD,QAAQ,CACNC,SAAUF,IACVG,cAAeH,IACfI,UAAWJ,IACXK,YAAaL,IACbM,WAAYN,KAEdO,MAAM,SAlSlB,OAsSI6E,KAAKsC,SAASC,GACdvC,KAAKT,SAtTA,CACL6B,MAAO,GACP1G,KAAM,GACNC,SAAU,GACVG,SAAU,GACVC,cAAe,GACfC,UAAW,GACXC,YAAa,GACbC,WAAY,GACZmG,YAAa,GACbC,YAAa,GACbC,gBAAiB,GACjBpG,MAAO,KA2SP6E,KAAKpH,MAAM0K,UAAX,YAxSJ,4GAAiC3C,aA4SpB4C,GAAb,kDACE,WAAmB3K,GAAsB,IAAD,8BACtC,cAAMA,IAKD6F,MAlUA,CACL2C,MAAO,GACP1G,KAAM,GACNC,SAAU,GACVG,SAAU,GACVC,cAAe,GACfC,UAAW,GACXC,YAAa,GACbC,WAAY,GACZmG,YAAa,GACbC,YAAa,GACbC,gBAAiB,GACjBpG,MAAO,IAwTP,EAAKqG,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKW,IAAM,EAAKA,IAAIX,KAAT,gBAT2B,EAD1C,uDAcI+B,EACAC,EACAtJ,GAEA,OAAQ,kBAAC,IAAD,CACNuJ,IAAKF,EACHxK,QAAO,uCAAE,WAAOuJ,GAAP,SAAA/E,EAAA,sDACP+E,EAAEoB,UACFxJ,IAFO,2CAAF,sDAIPtB,UACE4K,EAAU,8BAAgC,sCAE5CvK,GAAE,gBAAWsK,IAEdA,KA7BP,oCAiCwB,IAAD,OACnB,OAAOxD,KAAKpH,MAAMmF,SAAS6F,MAAK,SAACpG,EAAQqG,GACvC,IAAMC,EAAYtG,EAAErC,MAAM2H,OAAS,EAC7BiB,EAAYF,EAAE1I,MAAM2H,OAAS,EACnC,OAAGgB,IAAcC,EACR,GACED,GAAaC,GAGbvG,EAAEjD,SAASyJ,cAAgBH,EAAEtJ,SAASyJ,eAFvC,EAGO,KAChBvH,KAAI,SAACC,GACN,IAAMuH,OAECC,IAFiB,EAAKzF,MAAMtD,MAAM6C,MAAK,SAACqF,GAC7C,OAAOA,EAAE3I,OAASgC,EAAEnC,YAEtB,OAAO,EAAK4J,WACVzH,EAAEnC,SACF0J,GACA,WAEE,IAAM9I,EAAQ,EAAKsD,MAAMtD,MACzBA,EAAMuH,KAAK,CACThI,KAAMgC,EAAEnC,SACR6G,MAAO,GACPzG,SAAU,KAEZ,EAAK4E,SAAS,CACZpE,MAAOA,YA5DnB,+BAsEI,OACE,oCACA,4CACA,0BAAMtC,UAAU,kBAAkBkI,SAAUf,KAAKoC,KAC/C,kBAAC,GAAD,CACEjJ,MAAK,OACLJ,KAAM,OACN2B,KAAI,cACJgG,MAAOV,KAAKvB,MAAM/D,KAClBuG,YAAa,OACbH,SAAUd,KAAKwB,aAEhBxB,KAAKoE,cACN,4BACA,kBAAC,IAAD,CACEpL,QAASgH,KAAKoC,IACdrJ,KAAM,UACNG,GAAG,WAHL,qEApFR,iCA6FqBqJ,GACjB,IAAM7B,EAAQ6B,EAAEC,OAAO9B,MACvBV,KAAKT,SAAS,CAAE7E,KAAMgG,MA/F1B,+BAmGIiC,EACApI,EACAwD,GAEA,IAAIqD,EAAQuB,EAEZ,GAAkB,KAAfA,EAAkB,CACnBvB,EAAQ,cAER,IAAMwB,EAAe7E,EAAS8E,QAAO,SAACnG,GACpC,OAAOA,EAAEnC,WAAaA,KAExB,GAA2B,IAAxBqI,EAAaE,OAGd1B,EAFoBwB,EAAa,GAAGpI,OAAOC,KAAKC,KAKpD,OAAO0G,IArHX,kCAwHI2B,EACAxI,EACAwD,GAEA,IAAIpD,EAAWoI,EAEf,GAAqB,KAAlBA,EAAqB,CACtBpI,EAAW,IAEX,IAAMiI,EAAe7E,EAAS8E,QAAO,SAACnG,GACpC,OAAOA,EAAEnC,WAAaA,KAExB,GAA2B,IAAxBqI,EAAaE,OAAa,CAC3B,IAAME,EAAaJ,EAAa,GAAGpI,OAAOG,SAE1CA,EAAQ,UAAMqI,IAGlB,OAAOrI,IA1IX,mEA4IoB4H,GA5IpB,+EA6IIA,EAAEE,iBAEqB,KAApBzC,KAAKvB,MAAM/D,KA/IlB,uBAgJMiD,MAAM,uBAhJZ,0CAqJUqC,KAAKpH,MAAMqK,eACf,CACE1I,SAAUyF,KAAKvB,MAAM/D,KACrBF,OAAQ,CACNC,KAAK,CACHC,KAAOsF,KAAKkD,SAASlD,KAAKvB,MAAM2C,MAAOpB,KAAKvB,MAAM/D,KAAMsF,KAAKpH,MAAMmF,WAErEpD,SAAUwI,WAAWnD,KAAKoD,YAAYpD,KAAKvB,MAAM9D,SAAUqF,KAAKvB,MAAM/D,KAAMsF,KAAKpH,MAAMmF,YAEzFlD,QAAS,CACPC,SAAUqI,WAAWnD,KAAKvB,MAAM3D,UAChCC,cAAeoI,WAAWnD,KAAKvB,MAAM1D,eACrCC,UAAWmI,WAAWnD,KAAKvB,MAAMzD,WACjCC,YAAakI,WAAWnD,KAAKvB,MAAMxD,aACnCC,WAAYiI,WAAWnD,KAAKvB,MAAMvD,aAEpCC,MAAO6E,KAAKvB,MAAMtD,MAAMsB,KAAI,SAAC4G,GAE3B,MAAO,CACL9I,SAAU8I,EAAE3I,KACZF,OAAQ,CACNC,KAAM,CACJC,KAAM,EAAKwI,SAASG,EAAEjC,MAAOiC,EAAE3I,KAAM,EAAK9B,MAAMmF,WAElDpD,SAAUwI,WAAW,EAAKC,YAAYC,EAAE1I,SAAU0I,EAAE3I,KAAM,EAAK9B,MAAMmF,YAEvElD,QAAQ,CACNC,SAAUF,IACVG,cAAeH,IACfI,UAAWJ,IACXK,YAAaL,IACbM,WAAYN,KAEdO,MAAM,SAtLlB,OA0LI6E,KAAKT,SArfA,CACL6B,MAAO,GACP1G,KAAM,GACNC,SAAU,GACVG,SAAU,GACVC,cAAe,GACfC,UAAW,GACXC,YAAa,GACbC,WAAY,GACZmG,YAAa,GACbC,YAAa,GACbC,gBAAiB,GACjBpG,MAAO,KA0eP6E,KAAKpH,MAAM0K,UAAX,YA3LJ,4GAAuC3C,aAsM1B0D,GAAb,kDACE,WAAmBzL,GAAsB,IAAD,8BACtC,cAAMA,IAKD6F,MAAQ,CACX/D,KAAM,IAGR,EAAK8G,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAK6C,IAAM,EAAKA,IAAI7C,KAAT,gBAX2B,EAD1C,qDAkBI,OACE,oCACA,2CACA,0BAAM5I,UAAU,kBAAkBkI,SAAUf,KAAKsE,KAC/C,kBAAC,GAAD,CACEnL,MAAK,OACLJ,KAAM,OACN2B,KAAI,cACJgG,MAAOV,KAAKvB,MAAM/D,KAClBuG,YAAa,OACbH,SAAUd,KAAKwB,iBA5BzB,iCAkCqBe,GACjB,IAAM7B,EAAQ6B,EAAEC,OAAO9B,MACvBV,KAAKT,SAAS,CAAE7E,KAAMgG,MApC1B,mEAsCoB6B,GAtCpB,wEAuCIA,EAAEE,iBAvCN,SAyCUzC,KAAKpH,MAAMqK,eACfjD,KAAKvB,MAAM/D,MA1CjB,OA4CIsF,KAAKpH,MAAM0K,UAAX,YACAtD,KAAKT,SAAS,CACZ7E,KAAM,KA9CZ,4GAAiCiG,aAyDpB4D,GAAb,kDACE,WAAmB3L,GAA4B,IAAD,8BAC5C,cAAMA,IAKD0L,IAAM,EAAKA,IAAI7C,KAAT,gBANiC,EADhD,uDAWI+B,EACArJ,GAEA,OAAQ,kBAAC,IAAD,CACNuJ,IAAKF,EACHxK,QAAO,uCAAE,WAAOuJ,GAAP,SAAA/E,EAAA,sDACP+E,EAAEoB,UACFxJ,IAFO,2CAAF,sDAIPtB,UAAW,8BACXK,GAAE,aAAQsK,IAEXA,KAvBP,oCA2BwB,IAAD,OACnB,OAAOxD,KAAKpH,MAAMmF,SAAS6F,MAAK,SAACpG,EAAQqG,GACvC,IAAMC,EAAYtG,EAAErC,MAAM2H,OAAS,EAC7BiB,EAAYF,EAAE1I,MAAM2H,OAAS,EACnC,OAAGgB,IAAcC,EACR,GACED,GAAaC,GAGbvG,EAAEjD,SAASyJ,cAAgBH,EAAEtJ,SAASyJ,eAFvC,EAGO,KAChBvH,KAAI,SAACC,GACN,OAAO,EAAKyH,WACVzH,EAAEnC,UACF,WACE,EAAK+J,IAAI5H,EAAEnC,kBA1CrB,+BAmDI,OACE,oCACA,2CACCyF,KAAKoE,iBAtDZ,mEA0DoB1J,GA1DpB,iFA4DUsF,KAAKpH,MAAMqK,eACfvI,GA7DN,OA+DIsF,KAAKpH,MAAM0K,UAAX,YACAtD,KAAKT,SAAS,CACZ7E,KAAM,KAjEZ,4GAAuCiG,a,oBE/ZxB6D,G,kDApKb,WAAmB5L,GAAuB,IAAD,8BACvC,cAAMA,IACD6F,MAAQ,CACXgG,KAAM7L,EAAM6L,KACZC,aAAc,GACdC,cAAe,QALsB,E,sDAQxBC,GAAY,IAAD,OAI1B,IAAIF,EAAe1E,KAAKvB,MAAMiG,aAC9B,GAAiC,SAA7B1E,KAAKvB,MAAMkG,cAA0B,CACvC,GAC6B,IAA3B3E,KAAKpH,MAAM6L,KAAK3B,aACaoB,IAA7BlE,KAAKpH,MAAM6L,KAAK,GAAGI,MAEnB,OAAO7E,KAAKpH,MAAM6L,KAAKG,GAEvBF,EAAe,QAKnB,OAAO1E,KAAKpH,MAAM6L,KAAKb,MAAK,SAACpG,EAAGqG,GAE9B,IAAIiB,EAAOtH,EAAEkH,GACTK,EAAOlB,EAAEa,GAQb,QAJaR,IAATY,QAA+BZ,IAATa,IACxBD,EAAOtH,EAAE,EAAK5E,MAAMoM,QAAQ,IAC5BD,EAAOlB,EAAE,EAAKjL,MAAMoM,QAAQ,KAGX,SAAjBN,GACiB,UAAjBA,GACiB,QAAjBA,EACA,CACA,IAAMO,EAAW,IAAIC,KAAKJ,GAAMK,UAC1BC,EAAW,IAAIF,KAAKH,GAAMI,UAE1BE,GAAWC,OAAOC,MAAMN,GACxBO,GAAWF,OAAOC,MAAMH,GAE9B,GAAIC,IAAYG,EAEd,OAAO,EACF,IAAKH,GAAWG,EAErB,OAAQ,EACCH,GAAWG,IACpBV,EAAOG,EACPF,EAAOK,OAGiB,UAAjBV,QACSR,IAATY,QAA+BZ,IAATa,IAC/BD,EAAOA,EAAKW,cACZV,EAAOA,EAAKU,eAGd,OAAIX,EAAOC,EACwB,QAA7B,EAAKtG,MAAMkG,eAEL,EAGD,EAEAG,EAAOC,EACiB,QAA7B,EAAKtG,MAAMkG,cAEN,GAGC,EAIH,KAERC,K,gCAGH,OAAO5E,KAAKpH,MAAM6L,KAAK3B,S,kCAIvB4C,EACAf,GAIA3E,KAAKT,SAAS,CACZmF,aAAcgB,EACdf,cAAeA,M,qCAIIgB,EAAmCC,GAAW,IAAD,OAElE,MAAmB,QAAfD,EAAOjC,KAAiB1D,KAAKpH,MAAMiN,QAE9B,CACL,CACEC,KAAM,cACN5I,SAAU,WACJgC,OAAO6G,QAAP,0BAAkCH,EAAG,KAArC,kBACF,EAAKhN,MAAMoN,eAAeJ,EAAG,SAKb,SAAfD,EAAOjC,KAAkBkC,EAAG,UAAc,EAE5C,CACL,CACEE,KAAM,YACN5I,SAAU,WAEN,EAAKtE,MAAMqN,aAAaL,EAAG,SAKX,SAAfD,EAAOjC,KAAkB1D,KAAKpH,MAAMsN,SAEtC,CACL,CACEJ,KAAM,aACN5I,SAAU,WAEN,EAAKtE,MAAMuN,aAAaP,EAAG,SAO5B,K,+BAKT,OACE,kBAAC,KAAD,CACEZ,QAAShF,KAAKpH,MAAMoM,QACpBoB,UAAWpG,KAAKoG,UAAU3E,KAAKzB,MAC/BqG,UAAWrG,KAAKpH,MAAM6L,KAAK3B,OAC3BwD,kBAAmBtG,KAAKpH,MAAM2N,sBAC9BC,UAAoC,GAAzBxG,KAAKpH,MAAM6L,KAAK3B,OAAc,GAEzC2D,kBAAkB,EAClBC,qBAAiBxC,EACjByC,WAAY3G,KAAK4G,YAAYnF,KAAKzB,MAClC6G,eAAgB7G,KAAK6G,eAAepF,KAAKzB,Y,GA/J1B8G,IAAMnG,W,kBCGdoG,G,uKAhBI,IAAD,OACd,OACE,kBAACC,GAAA,EAAD,CACEC,UAAU,MACVC,QAAS,SAACtO,GAAD,OACP,kBAACuO,GAAA,EACKvO,EADN,UAEK,EAAKA,MAAM8B,KAFhB,YAEwB,EAAK9B,MAAM8H,UAGrC,8BAAOV,KAAKpH,MAAM8H,Y,GAXIoG,IAAMnG,WFgBhCtF,GAAS,GA+Cb,SAAS+L,KACP,OAAO/L,GAGT,SAASiI,GAAUlH,GACjB8E,GAAkB3B,SAAS,CACzB8H,UAAWjL,IAIf,SAASkL,GACPvJ,EACAwJ,GAEA,YAAiBrD,IAAdqD,EAEM,GAGFA,EAAUpM,MAGZ,SAAShB,GACdpB,GAEA,QAA0BmL,IAAtBhD,GAAJ,CADA,oBAIgBsG,GAAMC,QAJtB,IAIA,2BAA8B,CAAC,IAApBC,EAAmB,QAC5B,GAAIA,IAAM3O,EAAM,CACd,IAAM4O,EAAOH,GAAMI,IAAIF,GACvB,QAAaxD,IAATyD,EAEF,YADAnP,EAAI,6BAAD,OAA8BO,IAGnC4O,EAAKE,SAAU,IAXnB,8BAcA,IAAMF,EAAOH,GAAMI,IAAI7O,GACvB,QAAamL,IAATyD,EAEF,OADAnP,EAAI,6BAAD,OAA8BO,KAC1B,EAET4O,EAAKE,SAAU,EACf3G,GAAkB4G,aAChB,IAIJ,IAAMN,GAAQ,IAAIO,IAKhB,CACA,CACE3O,EACA,CACEyO,SAAS,MAKf,SAASG,GAAcC,GACrB,OAAkB,IAAfA,EAAInF,QAGO,MAAXmF,EAAI,GAFErN,IAKFuI,WAAW8E,GA8HpB,SAASC,GACPC,EACAC,IA5HF,SACEC,EAUAC,EAUAH,GAKA,QAAqBjE,IAAlBoE,EAAS5N,KAAZ,CAMA,GAAGyN,EAAW,CAEZ,QAAyBjE,IAAtBoE,EAASxN,SAEV,YADA6C,MAAK,uDAGP,QAAwBuG,IAArBoE,EAASC,QAEV,YADA5K,MAAK,sDAGP,QAAoBuG,IAAjBoE,EAASE,IAEV,YADA7K,MAAK,kDAGP,QAAsBuG,IAAnBoE,EAASG,MAEV,YADA9K,MAAK,oDAGP,QAAqBuG,IAAlBoE,EAASI,KAEV,YADA/K,MAAK,mDAIP,IAAMgL,EAAQR,EAAWhN,MAAM6C,MAAK,SAACqF,GACnC,OAAOA,EAAE9I,WAAa8N,EAAW3N,QAcnC,OAZAhC,QAAQF,IAAR,0BAA+BmQ,IAC5BA,QAA4BzE,IAAnBoE,EAASlH,QACnBuH,EAAMnO,OAAOC,KAAKC,KAAO4N,EAASlH,OAEjCuH,QAA+BzE,IAAtBoE,EAAS3N,WACnBgO,EAAMnO,OAAOG,SAAW2N,EAAS3N,eAEnC0D,EAAW+I,KAAae,EAAd,sBAA0B,sBAAA3K,EAAA,sEAC5B0D,GAAkB4G,aACtB,GAFgC,4CAQtC,IAAM/K,EAAa,CACjBxC,SAAU8N,EAAW3N,KACrBF,OAAQ,CACNC,KAAM,CACJC,KAAM2N,EAAWjH,OAEnBzG,SAAU0N,EAAW1N,UAEvBE,QAAS,CACPC,SAAUkN,GAAcK,EAAWvN,UACnCC,cAAeiN,GAAcK,EAAWE,SACxCtN,YAAa+M,GAAcK,EAAWI,OACtCzN,UAAWgN,GAAcK,EAAWG,KACpCtN,WAAY8M,GAAcK,EAAWK,OAEvCvN,MAAO,SAGa+I,IAAnBoE,EAASlH,QACVrE,EAAKvC,OAAOC,KAAKC,KAAO4N,EAASlH,YAEV8C,IAAtBoE,EAAS3N,WACVoC,EAAKvC,OAAOG,SAAW2N,EAAS3N,UAE/BoC,EAAKlC,cAAiCqJ,IAAtBoE,EAASxN,WAC1BiC,EAAKlC,QAAQC,SAAWqI,WAAWmF,EAASxN,WAE3CiC,EAAKlC,cAAgCqJ,IAArBoE,EAASC,UAC1BxL,EAAKlC,QAAQE,cAAgBoI,WAAWmF,EAASC,UAEhDxL,EAAKlC,cAA8BqJ,IAAnBoE,EAASG,QAC1B1L,EAAKlC,QAAQI,YAAckI,WAAWmF,EAASG,QAE9C1L,EAAKlC,cAA4BqJ,IAAjBoE,EAASE,MAC1BzL,EAAKlC,QAAQG,UAAYmI,WAAWmF,EAASE,MAE5CzL,EAAKlC,cAA6BqJ,IAAlBoE,EAASI,OAC1B3L,EAAKlC,QAAQK,WAAaiI,WAAWmF,EAASI,OAGhDrK,EAAW+I,KAAarK,EAAd,sBAAoB,sBAAAS,EAAA,sEACtB0D,GAAkB4G,aACtB,GAF0B,iDAtFzBQ,EAAS5N,OAAS2N,EAAW3N,MAC9BiD,MAAK,mDAuGTiL,CAJmBR,EAAK,GAAGS,YACVT,EAAK,GAAGU,QAGaX,GAiBjC,IAAMY,GAAb,kDACE,WAAmBnQ,GAAkB,IAAD,8BAClC,cAAMA,IA6HAoQ,cAAgB,CACtBC,UAAU,EACVC,WAAW,EACXC,UAAU,GA7HVjI,GAAiB,eACjB,EAAKzC,MAAQ,CACXV,SAAU,GACVqL,aAAc,GACdC,cAAe,GACf9B,eAAWrD,EACXoF,gBAAYpF,EACZmD,UAAW,IAEb,EAAKS,aACH,GAdgC,EADtC,gHAqCI3N,GAAOf,KArCX,2EAyCImQ,GAzCJ,8EA4CI/Q,EAAI,eAEAuF,EAAmBmD,GAAkBzC,MAAMV,UAG3CwL,EAjDR,gCAoDuB7L,EAAS0J,MApDhC,OAoDMrJ,EApDN,cA0DUqL,EAAe9B,GAAYvJ,EAAUiC,KAAKvB,MAAM8I,WAChD8B,EAAgB/B,GAAYvJ,EAAUiC,KAAKvB,MAAM6K,YAGvDpI,GAAkB3B,SAChB,CACExB,SAAUA,EACVqL,aAAcA,EACdC,cAAeA,IAEjB,WVxVG,KUoRT,yIAoFuB,IAAD,OAClB,OAAO/P,GAAc,WACnB,OACE,oCACE,kBAACE,EAAA,EAAOgQ,OAAR,CAAeC,gBAAc,qBAC7B,kBAACjQ,EAAA,EAAOkQ,SAAR,CAAiBxQ,GAAG,oBAClB,kBAACyQ,EAAA,EAAD,CAAK9Q,UAAU,WACb,kBAAC+Q,EAAA,EAAD,CACEC,QAAM,EACN9I,SAAU,SAACwB,GAET,OADAA,EAAEE,kBACK,IAGT,yBAAK5J,UAAU,OACb,yBAAKA,UAAU,OAAO,EAAKiR,uBAIjC,kBAACH,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,QAAM,EACN9I,SAAU,SAACwB,GAET,OADAA,EAAEE,kBACK,IAGT,yBAAK5J,UAAU,OACb,yBAAKA,UAAU,2BACZ,EAAKkR,oBAER,yBAAKlR,UAAU,sCAnHjC,+BAqImB2E,EAAWqG,GAC1B,OAAIrG,EAAEwG,cAAgBH,EAAEG,eACd,EAENxG,EAAEwG,cAAgBH,EAAEG,cACf,EAELxG,EAAIqG,GACE,EAENrG,EAAIqG,EACC,EAEF,IAlJX,6CAsJIR,EACA2G,GAEA,IAAMC,EAAejK,KAAKvB,MAAMV,SAASC,MAAK,SAACC,GAC7C,OAAOA,EAAE1D,WAAa8I,EAAE9I,YAE1B,OAAI0P,EAGkBjK,KAAKkK,gBAAgBD,EAAcD,GAEpC/B,IAAM5E,EAAE7I,OAAOG,SAAWsP,EAAazP,OAAOG,SAJ1DC,MA7Jb,sCAsKI8B,EACAsN,GAIA,IAAD,OAEO/B,EAAM+B,EAAQtN,GACpB,GAAG6I,MAAM0C,IAAgB,OAARA,EAAa,CAC5B,IAAIkC,EAAQ,EAYZ,OAXAzN,EAAEvB,MAAMiP,SAAQ,SAAC/G,GACM,EAAK5E,MAAMV,SAASC,MAAK,SAACC,GAC7C,OAAOA,EAAE1D,WAAa8I,EAAE9I,YAM1B4P,GAAS,EAAKE,uBAAuBhH,EAAG2G,GAHtCG,EAAQvP,OAML,CACLqN,IAAKkC,EACLG,UAAU,GAIZ,MAAO,CACLrC,IAAKA,EACLqC,UAAU,KAnMlB,6CAyMIjH,EACA2G,GAEA,IAAMO,EAAIvK,KAAKqK,uBAAuBhH,EAAG2G,GACzC,OAAGzE,MAAMgF,GACA,GAED,IAAN,OAAWA,EAAX,OAhNN,sCAqNI7N,EACAsN,GAGA,IAAMQ,EAAMxK,KAAKkK,gBAAgBxN,EAAGsN,GACpC,OAAGQ,EAAIF,SACC,GAAN,OAAUE,EAAIvC,KAER,IAAN,OAAWuC,EAAIvC,IAAf,OA7NN,iCAkOI9O,EACAgP,EACA1K,EACAwI,EACAE,EACAN,EACAK,EACA+C,GACC,IAAD,OACA,OACE,oCACE,4BAAK9P,GACL,kBAAC,GAAD,CACE6M,eAAc,uCAAE,WAAeiC,GAAf,SAAAzK,EAAA,6DACd9E,QAAQF,IAAR,wBAA6ByP,IADf,SAER9J,EAAWiJ,KAAaa,EAAd,sBAAmB,sBAAAzK,EAAA,sEAC3B0D,GAAkB4G,aACtB,GAF+B,4CAFrB,iCAOP,GAPO,2CAAF,sDASd7B,aAAcA,EACdE,aAAcA,EACdN,QAASA,EACTK,SAAUA,EACVK,sBAAuB,WAErB,OADA7N,QAAQF,IAAI,eACL0P,GAAqBC,EAAYsC,YAE1ChG,KAAMhH,EACHhB,KAAI,SAACC,GAEJ,GAAGA,EAAE7B,cAAkCqJ,IAAvBxH,EAAE7B,QAAQC,SAAuB,CAC/C,GAAGqN,EAAW,CACZ,IAAIuC,GAAY,EACVT,EAAe,EAAKxL,MAAMV,SAASC,MAAK,SAACC,GAC7C,OAAOA,EAAE1D,WAAamC,EAAEnC,YAK1B,OAHG0P,IACDS,EAAYT,EAAa9O,MAAM2H,OAAS,GAEnC,CACLpI,KAAMgC,EAAEnC,SACR6G,MAAO1E,EAAElC,OAAOC,KAAKC,KACrBC,SAAU,EAAKgQ,gBAAgBjO,GAAG,SAACuB,GAAU,OAAOA,EAAEzD,OAAOG,YAC7DG,SAAU,EAAK8P,uBAAuBlO,GAAG,SAACuB,GAAU,OAAOA,EAAEpD,QAAQoD,EAAEpD,QAAQC,SAASF,OACxF2N,QAAS,EAAKqC,uBAAuBlO,GAAG,SAACuB,GAAU,OAAOA,EAAEpD,QAAQoD,EAAEpD,QAAQE,cAAcH,OAC5F4N,IAAK,EAAKoC,uBAAuBlO,GAAG,SAACuB,GAAU,OAAOA,EAAEpD,QAAQoD,EAAEpD,QAAQG,UAAUJ,OACpF6N,MAAO,EAAKmC,uBAAuBlO,GAAG,SAACuB,GAAU,OAAOA,EAAEpD,QAAQoD,EAAEpD,QAAQI,YAAYL,OACxF8N,KAAM,EAAKkC,uBAAuBlO,GAAG,SAACuB,GAAU,OAAOA,EAAEpD,QAAQoD,EAAEpD,QAAQK,WAAWN,OACtF8P,UAAWA,GAGb,MAAO,CACLhQ,KAAMgC,EAAEnC,SACR6G,MAAO1E,EAAElC,OAAOC,KAAKC,KACrBC,SAAU,EAAKgQ,gBAAgBjO,GAAG,SAACuB,GAAU,OAAOA,EAAEzD,OAAOG,YAC7DG,SAAU,EAAK6P,gBAAgBjO,GAAG,SAACuB,GAAU,OAAOA,EAAEpD,QAAQoD,EAAEpD,QAAQC,SAASF,OACjF2N,QAAS,EAAKoC,gBAAgBjO,GAAG,SAACuB,GAAU,OAAOA,EAAEpD,QAAQoD,EAAEpD,QAAQE,cAAcH,OACrF4N,IAAK,EAAKmC,gBAAgBjO,GAAG,SAACuB,GAAU,OAAOA,EAAEpD,QAAQoD,EAAEpD,QAAQG,UAAUJ,OAC7E6N,MAAO,EAAKkC,gBAAgBjO,GAAG,SAACuB,GAAU,OAAOA,EAAEpD,QAAQoD,EAAEpD,QAAQI,YAAYL,OACjF8N,KAAM,EAAKiC,gBAAgBjO,GAAG,SAACuB,GAAU,OAAOA,EAAEpD,QAAQoD,EAAEpD,QAAQK,WAAWN,OAC/E8P,UAAWhO,EAAEvB,MAAM2H,OAAS,GAIhC,MAAO,CACLpI,KAAMgC,EAAEnC,SACRO,SAAU,gBAIf8I,MAAK,SAACpG,EAASqG,GAAV,OAAsB,EAAKgH,SAASrN,EAAE9C,KAAMmJ,EAAEnJ,SACtDsK,QAAS,CAAC,2BAEHhF,KAAKgJ,eAFH,IAGLtF,IAAK,MACLhJ,KAAM,GACNuO,UAAU,EACVhP,MAAO,KANF,2BASF+F,KAAKgJ,eATH,IAULtF,IAAK,OACLhJ,KAAM,GACNuO,UAAU,EACVhP,MAAO,KAbF,2BAgBF+F,KAAKgJ,eAhBH,IAiBLtF,IAAK,OACLhJ,KAAM,GACNuO,UAAU,EACVhP,MAAO,KApBF,2BAuBF+F,KAAKgJ,eAvBH,IAwBLtF,IAAK,OACLhJ,KAAM,OACNoQ,UAAW,kBAAC,GAAD,CAAiBpQ,KAAK,OAAOgG,MAAM,UAC9CuI,SAAUA,IA3BL,2BA8BFjJ,KAAKgJ,eA9BH,IA+BLtF,IAAK,QACLhJ,KAAK,QACLoQ,UAAW,kBAAC,GAAD,CAAiBpQ,KAAK,QAAQgG,MAAM,UAC/CuI,SAAUA,IAlCL,2BAqCFjJ,KAAKgJ,eArCH,IAsCLtF,IAAK,WACLhJ,KAAK,WACLoQ,UAAW,kBAAC,GAAD,CAAiBpQ,KAAK,QAAQgG,MAAM,UAC/CuI,SAAUA,IAzCL,2BA4CFjJ,KAAKgJ,eA5CH,IA6CLtF,IAAK,WACLhJ,KAAK,WACLoQ,UAAW,kBAAC,GAAD,CAAiBpQ,KAAK,QAAQgG,MAAM,UAC/CuI,SAAUA,IAhDL,2BAmDFjJ,KAAKgJ,eAnDH,IAoDLtF,IAAK,UACLhJ,KAAK,UACLoQ,UAAW,kBAAC,GAAD,CAAiBpQ,KAAK,QAAQgG,MAAM,UAC/CuI,SAAUA,IAvDL,2BA0DFjJ,KAAKgJ,eA1DH,IA2DLtF,IAAK,MACLhJ,KAAK,MACLoQ,UAAW,kBAAC,GAAD,CAAiBpQ,KAAK,QAAQgG,MAAM,UAC/CuI,SAAUA,IA9DL,2BAiEFjJ,KAAKgJ,eAjEH,IAkELtF,IAAK,QACLhJ,KAAK,QACLoQ,UAAW,kBAAC,GAAD,CAAiBpQ,KAAK,QAAQgG,MAAM,UAC/CuI,SAAUA,IArEL,2BAwEFjJ,KAAKgJ,eAxEH,IAyELtF,IAAK,OACLhJ,KAAK,OACLoQ,UAAW,kBAAC,GAAD,CAAiBpQ,KAAK,QAAQgG,MAAM,UAC/CuI,SAAUA,UAxXxB,gCAgYqB,IAAD,OAEhB,OACE,kBAAC8B,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,OAAN,KACE,kBAACF,EAAA,EAAUvB,OAAX,CAAmB0B,GAAIF,IAAKC,OAAQE,SAAS,cAA7C,gBAIF,kBAACJ,EAAA,EAAUrB,SAAX,CAAoByB,SAAS,cAC3B,kBAACC,EAAA,EAAD,2CAIJpL,KAAKqL,WACH,iBACAnH,EACAlE,KAAKvB,MAAMV,SAHb,uCAIE,WAAekK,GAAf,eAAAzK,EAAA,uDACQmL,EAAQzH,GAAkBzC,MAAMV,SAASC,MAAK,SAACtB,GACnD,OAAOA,EAAEnC,WAAa0N,OAItB/G,GAAkB3B,SAAS,CACzBgI,UAAWoB,GADb,sBAGA,sBAAAnL,EAAA,sEACQ0D,GAAkB4G,aACtB,GAFJ,4CATJ,2CAJF,kCAAA9H,KAAA,sDAoBE,WAAeiI,GAAf,mBAAAzK,EAAA,2DACQmL,EAAQzH,GAAkBzC,MAAMV,SAASC,MAAK,SAACtB,GACnD,OAAOA,EAAEnC,WAAa0N,MAF1B,oBAOsB,QADZqD,EAAYC,OAAO,iCAN7B,wDAUUC,EAAgB,CACpBjR,SAAU+Q,EACV9Q,OAAQmO,EAAMnO,OACdK,QAAS8N,EAAM9N,QACfM,MAAOwN,EAAMxN,OAdnB,SAgBc0C,EACRuJ,KACAoE,EACAtK,GAAkBzC,MAAMV,SAHT,sBAIf,sBAAAP,EAAA,sEACQ0D,GAAkB4G,aACtB,GAFJ,4CApBN,kCA0BMnK,MAAM,yCA1BZ,oDApBF,kCAAAqC,KAAA,gBAkDE,GACA,GACA,GAxDE,IA4DJA,KAAKqL,WACHrL,KAAKvB,MAAM8I,UAAX,mBAAmCvH,KAAKvB,MAAM8I,UAAUhN,UAAY,2CACpEyF,KAAKvB,MAAM8I,UACXvH,KAAKvB,MAAM2K,aAHb,uCAIE,WAAenB,GAAf,eAAAzK,EAAA,uDACQmL,EAAQzH,GAAkBzC,MAAMV,SAASC,MAAK,SAACtB,GACnD,OAAOA,EAAEnC,WAAa0N,OAItB/G,GAAkB3B,SAAS,CACzB+J,WAAYX,GADd,sBAGA,sBAAAnL,EAAA,sEACQ0D,GAAkB4G,aACtB,GAFJ,4CATJ,2CAJF,kCAAA9H,KAAA,sDAoBE,WAAeiI,GAAf,SAAAzK,EAAA,sDACEG,MAAM,sBADR,2CApBF,kCAAAqC,KAAA,gBAuBE,GACA,GACA,GAIFA,KAAKqL,WACHrL,KAAKvB,MAAM6K,WAAX,mBAAoCtJ,KAAKvB,MAAM6K,WAAW/O,UAAY,2CACtEyF,KAAKvB,MAAM8I,UACXvH,KAAKvB,MAAM4K,cAHb,uCAIE,WAAepB,GAAf,SAAAzK,EAAA,sDAEEG,MAAM,2BAFR,2CAJF,kCAAAqC,KAAA,sDAQE,WAAeiI,GAAf,SAAAzK,EAAA,sDAEEG,MAAM,sBAFR,2CARF,kCAAAqC,KAAA,gBAYE,GACA,GACA,MAMF,kBAACgL,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,OAAN,KACE,kBAACF,EAAA,EAAUvB,OAAX,CAAmB0B,GAAIF,IAAKC,OAAQE,SAAS,YAA7C,2BAIF,kBAACJ,EAAA,EAAUrB,SAAX,CAAoByB,SAAS,YAC3B,kBAACC,EAAA,EAAD,KAEJ,kBAAC,GAAD,CACErN,SAAUiC,KAAKvB,MAAMV,SACrBkF,eAAc,uCAAE,WAAOuI,GAAP,SAAAhO,EAAA,sEAEJK,EACRuJ,KACAoE,EACA,EAAK/M,MAAMV,SAHI,sBAIf,sBAAAP,EAAA,sEACQ,EAAKsK,aACT,GAFJ,4CANY,iCAWVnK,MAAM,yCAXI,4EAAF,sDAed2F,UAAWA,QAMb,kBAAC0H,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,OAAN,KACE,kBAACF,EAAA,EAAUvB,OAAX,CAAmB0B,GAAIF,IAAKC,OAAQE,SAAS,kBAA7C,uCAIF,kBAACJ,EAAA,EAAUrB,SAAX,CAAoByB,SAAS,kBAC3B,kBAACC,EAAA,EAAD,KAEJ,kBAAC,GAAD,CACErN,SAAUiC,KAAKvB,MAAMV,SACrBkF,eAAc,uCAAE,WAAOuI,GAAP,SAAAhO,EAAA,6DACd9E,QAAQF,IAAR,0BAA+BgT,IADjB,SAEJ3N,EACRuJ,KACAoE,EACA,EAAK/M,MAAMV,SAHI,sBAIf,sBAAAP,EAAA,sEACM,EAAKsK,aACT,GAFF,4CANY,iCAWZnK,MAAM,yCAXM,4EAAF,sDAed2F,UAAWA,QAMb,kBAAC0H,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,OAAN,KACE,kBAACF,EAAA,EAAUvB,OAAX,CAAmB0B,GAAIF,IAAKC,OAAQE,SAAS,eAA7C,8BAIF,kBAACJ,EAAA,EAAUrB,SAAX,CAAoByB,SAAS,eAC3B,kBAACC,EAAA,EAAD,KAEJ,kBAAC,GAAD,CACEnI,eAAc,uCAAE,WAAOgF,GAAP,SAAAzK,EAAA,6DACd9E,QAAQF,IAAR,wBAA6ByP,IADf,SAER9J,EAAWiJ,KAAaa,EAAd,sBAAmB,sBAAAzK,EAAA,sEAC3B,EAAKsK,aACT,GAF+B,4CAFrB,4EAAF,sDASdxE,UAAWA,QAKb,kBAAC0H,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,OAAN,KACE,kBAACF,EAAA,EAAUvB,OAAX,CAAmB0B,GAAIF,IAAKC,OAAQE,SAAS,qBAA7C,gCAIF,kBAACJ,EAAA,EAAUrB,SAAX,CAAoByB,SAAS,qBAC3B,kBAACC,EAAA,EAAD,KAEJ,kBAAC,GAAD,CACErN,SAAUiC,KAAKvB,MAAMV,SACrBkF,eAAc,uCAAE,WAAOgF,GAAP,SAAAzK,EAAA,6DACd9E,QAAQF,IAAR,wBAA6ByP,IADf,SAER9J,EAAWiJ,KAAaa,EAAd,sBAAmB,sBAAAzK,EAAA,sEAC3B,EAAKsK,aACT,GAF+B,4CAFrB,4EAAF,sDASdxE,UAAWA,WApmBnB,yCA6mB8B,IAAD,OACnBmI,EAAyB,GAa/B,OAZAA,EAAQ/I,KACN,kBAAC,IAAD,CACE1J,QAAS,SAAC0S,GACRA,EAAM/H,UACN,EAAK/K,MAAM+S,gBAEbxS,MAAM,UACNN,UAAW,oCACX6K,IAAI,UACJxK,GAAE,cARJ,YAWKuS,IA3nBX,+BAkoBI,IAIE,OACE,oCACGzL,KAAK4L,YACN,oCACG5L,KAAK6L,YAIZ,MAAOtJ,GACP,OAAOvC,KAAK8L,sBA/oBlB,yCAopBI,OACE,oCACG9L,KAAK4L,YACN,qGAvpBR,yCA+pBI,IAAIH,EAAyB,GAE7B,OADAA,EAAUA,EAAQM,OAAO/L,KAAKgM,aAAahM,KAAKvB,MAAM4I,cAhqB1D,mCAkrBuBA,GAAmC,IAAD,OAC/ChL,EAAwB,GAC1B4P,EAAc5E,EA8BlB,MA7BoB,KAAhB4E,GACFA,EAAW,QACX5P,EAAOqG,KACL,wBAAI7J,UAAU,OAAOK,GAAG,YAAYwK,IAAI,aACrCuI,KAIL5P,EAAOqG,KACL,wBAAI7J,UAAU,eAAeK,GAAG,YAAYwK,IAAI,aAC7CuI,IAKW,KAAd5E,GACFhL,EAAOqG,KACL,kBAAC,IAAD,CACEgB,IAAK,QACL1K,QAAS,SAACuJ,GAERA,EAAEoB,UACF,EAAKpE,SAAS,CAAE8H,UAAW,MAE7BnO,GAAE,kBACFL,UAAW,uCARb,gBAYGwD,MAltBX,GAAgCsE,aAstBjBuL,GAj+Bf,WAAgB,IAAD,EHlBNC,qBAAW7N,GGoBhBK,EAFW,EAEXA,UACAE,EAHW,EAGXA,KACAsB,EAJW,EAIXA,kBACAC,EALW,EAKXA,gBACAI,EANW,EAMXA,OAEF,OAAK7B,GAAcE,GAIdF,GAAaE,GAChBxD,GAASwD,EAAKwB,IAEZ,kBAAC,GAAD,CACEsL,aAAc,WAaZ,MAZe,eAAXtQ,IACF7C,EAAI,UAAD,OAAW6C,KAWTmF,EAAO,CACZ4L,SACElN,OAAOC,SAASC,OAAS/E,gCAG/BwE,KAAMA,MAIZxD,GAAS,GACF,OA9BLA,GAAS,GPCN,SAAmB8E,EAAwBC,GAChD,OACE,oCACG9G,GAAc,WACb,OAAO,+EAET,yBAAKT,UAAU,OACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,qBACb,2CADF,2DAGE,6BACA,kBAAC,EAAD,CACEE,KAAK,YACLG,GAAG,cACHD,OAAQkH,EACRhH,MAAM,+BAER,kBAAC,EAAD,CACEJ,KAAK,YACLG,GAAG,kBACHD,OAAQmH,EACRjH,MAAM,kCOtBTkT,CAAUlM,EAAmBC,KGvBpBkM,QACW,cAA7BpN,OAAOC,SAASoN,UAEe,UAA7BrN,OAAOC,SAASoN,UAEhBrN,OAAOC,SAASoN,SAAS5D,MACvB,2DCZN6D,IAASC,OACP,kBAAC,EAAD,KACE,kBAAC,GAAD,OAEF3M,SAAS4M,eAAe,SD+HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3Q,MAAK,SAAA4Q,GACjCA,EAAaC,kB","file":"static/js/main.197c5a71.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cat.50c12de4.png\";","let doLog = true;\nexport function log(obj: string) {\n  if (doLog) {\n    /* eslint-disable no-console */ // all console calls routed through here\n    // tslint:disable-next-line:no-console\n    console.log(obj);\n    /* eslint-enable no-console */\n  }\n}\nexport function suppressLogs() {\n  doLog = false;\n}\nexport function unSuppressLogs() {\n  doLog = true;\n}\n\nexport function printDebug(): boolean {\n  return false;\n}\n\nexport function showObj(obj: number | string | Record<string, any> | undefined) {\n  return JSON.stringify(obj, null, 4);\n}\n","import React from 'react';\n// import { log } from './../../utils';\n\ninterface ButtonProps {\n  type: string;\n  id: string;\n  action: (e: any) => void; // TODO any : MouseEvent?\n  title: string;\n}\n\nconst Button = (props: ButtonProps) => {\n  let className = '';\n  const spacer = ' mr-1 mb-1';\n  if (props.type === 'primary') {\n    className = `btn btn-primary${spacer}`;\n  } else if (props.type === 'primary-off') {\n    className = `btn btn-outline-primary${spacer}`;\n  } else if (props.type === 'secondary-on') {\n    className = `btn btn-secondary${spacer}`;\n  } else if (props.type === 'secondary') {\n    className = `btn btn-outline-secondary${spacer}`;\n  } else {\n    className = `btn btn-error${spacer}`;\n  }\n  return (\n    <button\n      onClick={props.action}\n      id={props.id} // id can be checked by selenium\n      type={props.type === 'primary' ? 'submit' : 'button'}\n      className={className}\n    >\n      {props.title}\n    </button>\n  );\n};\n\nexport default Button;\n","export const NO_ASSET_NAME = '';\nexport interface ViewType {\n  lc: string;\n}\nexport const homeView: ViewType = { lc: 'Home' };","import React from 'react';\nimport Button from './reactComponents/Button';\nimport FinNeoCat from './cat.png';\nimport { Navbar } from 'react-bootstrap';\nimport { toggle } from '../App';\nimport { homeView } from '../localization/stringConstants';\n\nexport function navbarContent(rhContent: () => any) {\n  return (\n    <Navbar expand=\"lg\" bg=\"light\" sticky=\"top\">\n      <Navbar.Brand href=\"#home\" id=\"finneo-brand\">\n        <div className=\"page-header\">\n          <div className=\"col\">\n            <div className=\"row\">\n              <h3>{`FinNeo`}</h3>\n            </div>\n            <div className=\"row\">\n              <img\n                src={FinNeoCat}\n                alt=\"FinNeo cat\"\n                width={70}\n                height={'auto'}\n                onClick={() => {\n                  toggle(homeView);\n                }}\n                id=\"btn-Home\"\n              ></img>\n            </div>\n          </div>\n        </div>\n      </Navbar.Brand>\n      {rhContent()}\n    </Navbar>\n  );\n}\n\nexport function loginPage(loginWithRedirect: any, loginForTesting: any) {\n  return (\n    <>\n      {navbarContent(() => {\n        return <h3>An app for fitnesss, nutrition and a new you</h3>;\n      })}\n      <div className=\"row\">\n        <div className=\"col-sm mb-4\">\n          <div className=\"alert alert-block\">\n            <h2>Get started</h2> To begin using this app, log in or use a shared\n            playpen\n            <br />\n            <Button\n              type=\"secondary\"\n              id=\"buttonLogin\"\n              action={loginWithRedirect}\n              title=\"Login or create an account\"\n            />\n            <Button\n              type=\"secondary\"\n              id=\"buttonTestLogin\"\n              action={loginForTesting}\n              title=\"Shared playpen (no login)\"\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import { Food } from '../types/interfaces';\nimport { log, printDebug, showObj } from '../utils';\n\nconst url = process.env.REACT_APP_SERVER_URL_NOT_SECRET;\n\nexport const currentVersion = 1;\n\nfunction makeBlankFood(\n  foodName: string\n): Food{\n  return {\n    foodName: foodName,\n    amount: {\n      unit: {\n        name: 'no unit',\n      },\n      quantity: NaN,\n    },\n    details: {\n      calories: NaN,\n      proteinWeight: NaN,\n      vegWeight: NaN,\n      carbsWeight: NaN,\n      fatsWeight: NaN,\n    },\n    parts: [],\n  };\n}\n\n/*\nafter parsing, we have {\n    \"amount\": {\n        \"unit\": {\n            \"name\": \"1\"\n        },\n        \"quantity\": 1\n    },\n    \"details\": {\n        \"calories\": 1,\n        \"proteinWeight\": 1,\n        \"vegWeight\": 1,\n        \"carbsWeight\": 1,\n        \"fatsWeight\": 1\n    },\n    \"parts\": [\n        {\n            \"foodName\": \"1\",\n            \"amount\": {\n                \"unit\": {\n                    \"name\": \"1\"\n                },\n                \"quantity\": 1\n            },\n            \"details\": {\n                \"calories\": null,\n                \"proteinWeight\": null,\n                \"vegWeight\": null,\n                \"carbsWeight\": null,\n                \"fatsWeight\": null\n            },\n            \"parts\": []\n        }\n    ],\n    \"version\": 1\n}\n*/\n\nfunction makeFood(\n  foodName: string,\n  data: string,\n): Food{\n  try{\n    // console.log(`try parsing string ${showObj(data)}`);\n    const obj = JSON.parse(data);\n    // console.log(`after parsing, we have ${showObj(obj)}`);\n    if(obj.version === currentVersion){\n      return {\n        foodName: foodName,\n        amount: obj.amount,\n        details: obj.details,\n        parts: obj.parts\n      };\n    } else {\n      console.log(`don't understand version`);\n      return makeBlankFood(foodName);\n\n    }\n  } catch(err){\n    console.log(`recovering from err ${err}`);\n    return makeBlankFood(foodName);  \n  }\n}\n\n\nexport class RESTDB {\n  getFoods(userID: string): Promise<Food[]> {\n    if (printDebug()) {\n      log(`url for REST requests = ${url}`);\n    }\n    const myHeaders = new Headers();\n    myHeaders.append('Content-Type', 'application/x-www-form-urlencoded');\n\n    return new Promise((resolve, reject) => {\n      const requestOptions: {\n        method: string;\n        headers: Headers;\n        redirect: 'follow' | 'error' | 'manual' | undefined;\n      } = {\n        method: 'GET',\n        headers: myHeaders,\n        redirect: 'follow',\n      };\n      const address = `${url}foods?userID=${userID}`;\n      // console.log(`address for fetch is ${address}`);\n      return fetch(address, requestOptions)\n        .then(response => response.text())\n        .then(result => {\n          // console.log(result);\n          try {\n            const parsedResult:{\n              foodName: string,\n              food: string,\n            }[] = JSON.parse(result);\n            // console.log(`foods are ${showObj(parsedResult)}`);\n\n            resolve(parsedResult.map((f)=>{\n\n              const result: Food = makeFood(f.foodName, f.food);\n              return result;\n            }));\n          } catch (err) {\n            reject('Query failed');\n          }\n        })\n        .catch(error => {\n          console.log('error', error);\n          reject(error);\n        });\n    });\n  }\n\n  addFood(\n    userID: string, \n    foodName: string,\n    food: string,\n    callback: ()=>{},\n  ){\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\n    \n    var urlencoded = new URLSearchParams();\n    urlencoded.append(\"userID\", userID);\n    urlencoded.append(\"foodName\", foodName);\n    urlencoded.append(\"food\", food);\n    \n    var requestOptions: {\n      method: string;\n      headers: Headers;\n      body: URLSearchParams;\n      redirect: 'follow' | 'error' | 'manual' | undefined;\n    } = {\n      method: 'POST',\n      headers: myHeaders,\n      body: urlencoded,\n      redirect: 'follow'\n    };\n    \n    fetch(`${url}food_create`, requestOptions)\n      .then(response => response.text())\n      .then(result => console.log(result))\n      .then(callback)\n      .catch(error => console.log('error', error));    \n  }\n\n  deleteFood(\n    userID: string, \n    foodName: string,\n    callback: ()=>{},\n  ){\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\n    \n    var urlencoded = new URLSearchParams();\n    urlencoded.append(\"userID\", userID);\n    urlencoded.append(\"foodName\", foodName);\n    \n    var requestOptions: {\n      method: string;\n      headers: Headers;\n      body: URLSearchParams;\n      redirect: 'follow' | 'error' | 'manual' | undefined;\n    } = {\n      method: 'DELETE',\n      headers: myHeaders,\n      body: urlencoded,\n      redirect: 'follow'\n    };\n    \n    fetch(`${url}food_delete`, requestOptions)\n      .then(response => response.text())\n      .then(result => console.log(result))\n      .then(callback)\n      .catch(error => console.log('error', error));\n  }\n\n  updateFood(\n    userID: string, \n    foodName: string,\n    food: string,\n    callback: ()=>{},\n  ){\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\n    \n    var urlencoded = new URLSearchParams();\n    urlencoded.append(\"userID\", userID);\n    urlencoded.append(\"foodName\", foodName);\n    urlencoded.append(\"food\", food);\n    \n    var requestOptions: {\n      method: string;\n      headers: Headers;\n      body: URLSearchParams;\n      redirect: 'follow' | 'error' | 'manual' | undefined;\n    } = {\n      method: 'PUT',\n      headers: myHeaders,\n      body: urlencoded,\n      redirect: 'follow'\n    };\n    \n    fetch(\"http://localhost:3001/finneo/food_update\", requestOptions)\n      .then(response => response.text())\n      .then(result => console.log(result))\n      .then(callback)\n      .catch(error => console.log('error', error));    \n  }\n}","import { RESTDB } from './REST_db';\n\n\nconst restdb = new RESTDB();\n\nexport function getDB() {\n  return restdb;\n}\n","import { Food } from '../types/interfaces';\nimport { log } from '../utils';\n\nimport { getDB } from './database';\nimport { currentVersion } from './REST_db';\n\nconst showDBInteraction = false;\n\nasync function getFoodsDB(userID: string): Promise<Food[]> {\n  if (showDBInteraction) {\n    log(`getDB get model names for user ${userID}`);\n  }\n  let foods: Food[] = [];\n  try {\n    foods = await getDB().getFoods(userID);\n  } catch (error) {\n    alert(`error contacting database ${error}`);\n  }\n  if (showDBInteraction) {\n    log(`getFoodsDB returning ${foods}`);\n  }\n  return foods;\n}\n\nexport async function getFoods(userID: string) {\n  const foods = await getFoodsDB(userID);\n  return foods;\n}\n\nasync function addFoodDB(\n  userID: string,\n  food: Food,\n  callback: ()=>{},\n): Promise<boolean> {\n  if (showDBInteraction) {\n    log(`add food for user ${userID}`);\n  }\n  try {\n    await getDB().addFood(\n      userID,\n      food.foodName,\n      JSON.stringify({\n        amount: food.amount,\n        details: food.details,\n        parts: food.parts,\n        version: currentVersion,\n      }),\n      callback,\n    );\n  } catch (error) {\n    alert(`error contacting database ${error}`);\n    return false;\n  }\n  if (showDBInteraction) {\n    log(`added food ${food}`);\n  }\n  return true;\n}\n\n\nexport async function addFood(\n  userID: string,\n  food: Food,\n  allFoods: Food[],\n  callback: ()=>{},\n): Promise<boolean> {\n  if(allFoods.find((x)=>{\n    return x.foodName === food.foodName;\n  })){\n    alert(`food with name ${food.foodName} already exists`);\n    return false\n  }\n  const result = await addFoodDB(userID, food, callback);\n  return result;\n}\n\nasync function deleteFoodDB(\n  userID: string,\n  foodName: string,\n  callback: ()=>{},\n) {\n  if (showDBInteraction) {\n    log(`delete food for user ${userID}`);\n  }\n  try {\n    await getDB().deleteFood(userID, foodName, callback);\n  } catch (error) {\n    alert(`error contacting database ${error}`);\n  }\n  if (showDBInteraction) {\n    log(`deleted food ${foodName}`);\n  }\n  return;\n}\n\n\nexport async function deleteFood(\n  userID: string,\n  foodName: string,\n  callback: ()=>{},\n) {\n  await deleteFoodDB(userID, foodName, callback);\n  return;\n}\n\nasync function updateFoodDB(\n  userID: string,\n  food: Food,\n  callback: ()=>{},\n) {\n  if (showDBInteraction) {\n    log(`update food for user ${userID}`);\n  }\n  try {\n    await getDB().updateFood(\n      userID, \n      food.foodName,\n      JSON.stringify({\n        amount: food.amount,\n        details: food.details,\n        parts: food.parts,\n        version: currentVersion,\n      }),      \n      callback);\n  } catch (error) {\n    alert(`error contacting database ${error}`);\n  }\n  if (showDBInteraction) {\n    log(`updated food ${food}`);\n  }\n  return;\n}\n\n\nexport async function updateFood(\n  userID: string,\n  food: Food,\n  callback: ()=>{},\n) {\n  await updateFoodDB(userID, food, callback);\n  return;\n}\n","import React, { Component, createContext, useContext } from 'react';\nimport createAuth0Client from '@auth0/auth0-spa-js';\nimport { log, printDebug, showObj } from './../utils';\n\n// create the context\nconst Auth0Context = createContext();\nexport const useAuth0 = () => {\n  // log(`in useAuth0`);\n  return useContext(Auth0Context);\n}\n\n// create a provider\nexport class Auth0Provider extends Component {\n  state = {\n    auth0Client: null,\n    isLoading: true,\n    isAuthenticated: false,\n    user: null\n  };\n  config = {\n    domain: process.env.REACT_APP_AUTH0_DOMAIN_NOT_SECRET,\n    client_id: process.env.REACT_APP_AUTH0_CLIENT_ID_NOT_SECRET,\n    redirect_uri:\n      window.location.origin + process.env.REACT_APP_ORIGIN_APPENDAGE,\n  };\n\n  componentDidMount() {\n    this.initializeAuth0();\n  }\n\n  // initialize the auth0 library\n  initializeAuth0 = async () => {\n    if(printDebug()){\n      log(`auth config is ${showObj(this.config)}`);\n    }\n    const auth0Client = await createAuth0Client(this.config);\n    this.setState({ auth0Client });\n\n    // check to see if they have been redirected after login\n    if (window.location.search.includes('code=')) {\n      return this.handleRedirectCallback();\n    }\n\n    const isAuthenticated = await auth0Client.isAuthenticated();\n    const user = isAuthenticated ? await auth0Client.getUser() : null;\n    this.setState({ isLoading: false, isAuthenticated, user });\n  };\n\n  handleRedirectCallback = async () => {\n    this.setState({ isLoading: true });\n\n    await this.state.auth0Client.handleRedirectCallback();\n    const user = await this.state.auth0Client.getUser();\n\n    this.setState({ user, isAuthenticated: true, isLoading: false });\n    window.history.replaceState({}, document.title, window.location.pathname);\n  };\n\n  render() {\n    const { auth0Client, isLoading, isAuthenticated, user } = this.state;\n    const { children } = this.props;\n\n    const configObject = {\n      isLoading,\n      isAuthenticated,\n      user,\n      loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\n      loginForTesting: (...p) => {\n        if (printDebug()) {\n          log(`p is ${p}`);\n        }\n        this.setState({\n          user: { sub: 'TestUserID' },\n          isAuthenticated: true,\n          isLoading: false,\n        });\n      },\n      getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\n      getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\n      logout: (...p) => auth0Client.logout(...p)\n    };\n\n    return (\n      <Auth0Context.Provider value={configObject}>\n        {children}\n      </Auth0Context.Provider>\n    );\n  }\n}\n","import React from 'react';\n\nexport const Input = props => {\n  //log(props.value);\n  return (\n    <div className=\"form-group\">\n      <label htmlFor={props.name} className=\"form-label\">\n        {props.title}\n      </label>\n      <input\n        className=\"form-control\"\n        id={props.name}\n        name={props.name}\n        type={props.type}\n        value={props.value}\n        onChange={props.onChange}\n        onBlur={props.onBlur}\n        placeholder={props.placeholder}\n      />\n    </div>\n  );\n};\n\nexport const InputRow = props => {\n  //log(props.value);\n  return (\n      <div className=\"form-group row\">\n      <label htmlFor={props.name} className=\"col-sm col-form-label\">\n        {props.title}\n      </label>\n      <div className=\"col-sm\">\n      <input\n        className=\"form-control\"\n        id={props.name}\n        name={props.name}\n        type={props.type}\n        value={props.value}\n        onChange={props.onChange}\n        onSubmit={props.onSubmit}\n        onBlur={props.onBlur}\n        placeholder={props.placeholder}\n      />\n      </div>\n    </div>\n  );\n};\n","import React, { Component, FormEvent } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { toggle } from '../../App';\nimport { Food } from '../../types/interfaces';\n\nimport { log, printDebug, showObj } from '../../utils';\nimport { InputRow } from './Input';\n\ninterface AddFoodState {\n  name:string,\n  units: string,\n  quantity:string,\n  calories: string,\n  proteinWeight: string,\n  vegWeight: string,\n  carbsWeight: string,\n  fatsWeight: string,\n  partNameWIP: string,\n  partUnitWIP: string,\n  partQuantityWIP: string,\n  parts: {\n    name:string,\n    units: string,\n    quantity:string,  \n  }[]\n}\ninterface AddFoodProps {\n  allFoods: Food[],\n  submitFunction: (f: Food) => Promise<any>;\n  showAlert: (message: string) => void;\n}\nfunction getEmptyState(): AddFoodState {\n  return {\n    units: '',\n    name: '',\n    quantity: '',\n    calories: '',\n    proteinWeight: '',\n    vegWeight: '',\n    carbsWeight: '',\n    fatsWeight: '',\n    partNameWIP: '',\n    partUnitWIP: '',\n    partQuantityWIP: '',\n    parts: [],\n  };\n}\nexport class AddFoodForm extends Component<AddFoodProps, AddFoodState> {\n  public constructor(props: AddFoodProps) {\n    super(props);\n    if (printDebug()) {\n      log('props for AddDeleteFoodForm: ' + showObj(props));\n    }\n\n    this.state = getEmptyState();\n\n    this.handleName = this.handleName.bind(this);\n    this.handleUnits = this.handleUnits.bind(this);\n    this.handleQuantity = this.handleQuantity.bind(this);\n    this.handleCalories = this.handleCalories.bind(this);\n    this.handleProteinWeight = this.handleProteinWeight.bind(this);\n    this.handleVegWeight = this.handleVegWeight.bind(this);\n    this.handleCarbsWeight = this.handleCarbsWeight.bind(this);\n    this.handleFatsWeight = this.handleFatsWeight.bind(this);\n    this.handlePartNameWIP = this.handlePartNameWIP.bind(this);\n    this.handlePartUnitWIP = this.handlePartUnitWIP.bind(this);\n    this.handlePartQuantityWIP = this.handlePartQuantityWIP.bind(this);\n    this.add = this.add.bind(this);\n    this.addPart = this.addPart.bind(this);\n    this.delParts = this.delParts.bind(this);\n  }\n  public render() {\n    //log(`rendering widget, title = ${this.props.name}`);\n    //log(`rendering widget, value from callback = ${this.props.getValue()}`);\n    //log(`rendering widget, value in component = ${this.state.VALUE}`);\n    return (\n      <>\n      <h2>Add new food</h2>\n      <form className=\"container-fluid\" onSubmit={this.add}>\n        <InputRow\n          title={`Name`}\n          type={'text'}\n          name={`AddFoodName`}\n          value={this.state.name}\n          placeholder={'name'}\n          onChange={this.handleName}\n        />\n        <InputRow\n          title={`Quantity`}\n          type={'text'}\n          name={`AddFoodQuantity`}\n          value={this.state.quantity}\n          placeholder={'quantity'}\n          onChange={this.handleQuantity}\n        />\n        <InputRow\n          title={`Units`}\n          type={'text'}\n          name={`AddFoodUnits`}\n          value={this.state.units}\n          placeholder={'units'}\n          onChange={this.handleUnits}\n        />\n        <InputRow\n          title={`Calories`}\n          type={'text'}\n          name={`AddFoodCalories`}\n          value={this.state.calories}\n          placeholder={'calories'}\n          onChange={this.handleCalories}\n        />\n        <InputRow\n          title={`Protein`}\n          type={'text'}\n          name={`AddFoodProtein`}\n          value={this.state.proteinWeight}\n          placeholder={'protein'}\n          onChange={this.handleProteinWeight}\n        />\n        <InputRow\n          title={`Veg`}\n          type={'text'}\n          name={`AddFoodVeg`}\n          value={this.state.vegWeight}\n          placeholder={'veg'}\n          onChange={this.handleVegWeight}\n        />\n        <InputRow\n          title={`Carbs`}\n          type={'text'}\n          name={`AddFoodCarbs`}\n          value={this.state.carbsWeight}\n          placeholder={'carbs'}\n          onChange={this.handleCarbsWeight}\n        />\n        <InputRow\n          title={`Fats`}\n          type={'text'}\n          name={`AddFoodFats`}\n          value={this.state.fatsWeight}\n          placeholder={'fats'}\n          onChange={this.handleFatsWeight}\n        />\n        {JSON.stringify(this.state.parts)}\n        <InputRow\n          title={`Part name`}\n          type={'text'}\n          name={`AddPartNameWIP`}\n          value={this.state.partNameWIP}\n          placeholder={'part name'}\n          onChange={this.handlePartNameWIP}\n        />\n        <InputRow\n          title={`Part quantity`}\n          type={'text'}\n          name={`AddFoodQtyWIP`}\n          value={this.state.partQuantityWIP}\n          placeholder={'part quantity'}\n          onChange={this.handlePartQuantityWIP}\n        />\n        <InputRow\n          title={`Part unit`}\n          type={'text'}\n          name={`AddPartUnitWIP`}\n          value={this.state.partUnitWIP}\n          placeholder={'part units'}\n          onChange={this.handlePartUnitWIP}\n        />\n        <Button\n          onClick={this.addPart}\n          type={'primary'}\n          id=\"addFoodPart\"\n        >Add a food part</Button>\n        <Button\n          onClick={this.delParts}\n          type={'primary'}\n          id=\"delFoodPart\"\n        >Delete a food part</Button>\n        <p></p>\n        <Button\n          onClick={this.add}\n          type={'primary'}\n          id=\"addFood\"\n        >Create new food (over-writes any existing with the same name)</Button>\n        </form>\n      </>\n    );\n  }\n  private handleName(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    this.setState({ name: value });\n  }\n  private handleUnits(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    this.setState({ units: value });\n  }\n  private handleQuantity(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    this.setState({ quantity: value });\n  }\n  private handleCalories(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    this.setState({ calories: value });\n  }\n  private handleProteinWeight(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    this.setState({ proteinWeight: value });\n  }\n  private handleVegWeight(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    this.setState({ vegWeight: value });\n  }\n  private handleCarbsWeight(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    this.setState({ carbsWeight: value });\n  }\n  private handleFatsWeight(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    this.setState({ fatsWeight: value });\n  }\n  private handlePartNameWIP(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    this.setState({ partNameWIP: value });\n  }\n  private handlePartUnitWIP(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    this.setState({ partUnitWIP: value });\n  }\n  private handlePartQuantityWIP(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    this.setState({ partQuantityWIP: value });\n  }\n  private async addPart(e: FormEvent<Element>) {\n    e.preventDefault();\n    const parts = this.state.parts;\n    parts.push({\n      name: this.state.partNameWIP,\n      units: this.state.partUnitWIP,\n      quantity: this.state.partQuantityWIP,\n    });\n    this.setState({ \n      parts: parts,\n      partNameWIP: '',\n      partUnitWIP: '',\n      partQuantityWIP: '',\n    });\n  }\n  private async delParts(e: FormEvent<Element>) {\n    e.preventDefault();\n    this.setState({ \n      parts: [],\n    });\n  }\n  private getUnits(\n    unitsInput: string,\n    foodName: string,\n    allFoods: Food[],\n  ){    \n    let units = unitsInput;\n    console.log(`given units for ${foodName}, are units ${units}`);\n    if(unitsInput === ''){\n      units = 'defaultUnit';\n      // console.log(`check for ${foodName} in allFoods`);\n      const matchedFoods = allFoods.filter((f)=>{\n        return f.foodName === foodName;\n      });\n      if(matchedFoods.length === 1){\n        const matchedUnit = matchedFoods[0].amount.unit.name;\n        // console.log(`matched a food called ${foodName}, with units ${matchedUnit}`);\n        units = matchedUnit;\n      }\n    }\n    return units;\n  }\n  private getQuantity(\n    quantityInput: string,\n    foodName: string,\n    allFoods: Food[],\n  ){\n    let quantity = quantityInput;\n    console.log(`given qty for ${foodName}, is ${quantityInput}`);\n    if(quantityInput === ''){\n      quantity = '1';\n      // console.log(`check for ${foodName} in allFoods`);\n      const matchedFoods = allFoods.filter((f)=>{\n        return f.foodName === foodName;\n      });\n      if(matchedFoods.length === 1){\n        const matchedQty = matchedFoods[0].amount.quantity;\n        // console.log(`matched a food called ${foodName}, with units ${matchedQty}`);\n        quantity = `${matchedQty}`;\n      }\n    }\n    return quantity;\n  }\n  private async add(e: FormEvent<Element>) {\n    e.preventDefault();\n\n    if(this.state.name === ''){\n      alert('a food needs a name');\n      return;\n    }\n\n    // log('adding something ' + showObj(this));\n    await this.props.submitFunction(\n      {\n        foodName: this.state.name,\n        amount: {\n          unit:{\n            name : this.getUnits(this.state.units, this.state.name, this.props.allFoods),\n          },\n          quantity: parseFloat(this.getQuantity(this.state.quantity, this.state.name, this.props.allFoods)),\n        },\n        details: {\n          calories: parseFloat(this.state.calories),\n          proteinWeight: parseFloat(this.state.proteinWeight),\n          vegWeight: parseFloat(this.state.vegWeight),\n          carbsWeight: parseFloat(this.state.carbsWeight),\n          fatsWeight: parseFloat(this.state.fatsWeight),\n        },\n        parts: this.state.parts.map((p)=>{\n\n          return {\n            foodName: p.name,\n            amount: {\n              unit: {\n                name: this.getUnits(p.units, p.name, this.props.allFoods),\n              },\n              quantity: parseFloat(this.getQuantity(p.quantity, p.name, this.props.allFoods)),\n            },\n            details:{\n              calories: NaN,\n              proteinWeight: NaN,\n              vegWeight: NaN,\n              carbsWeight: NaN,\n              fatsWeight: NaN,\n            },\n            parts:[],\n          }\n        }),\n      });\n    this.delParts(e);\n    this.setState(getEmptyState());\n    this.props.showAlert(`updating`);\n  }\n}\n\nexport class AddFoodButtonForm extends Component<AddFoodProps, AddFoodState> {\n  public constructor(props: AddFoodProps) {\n    super(props);\n    if (printDebug()) {\n      log('props for AddDeleteFoodForm: ' + showObj(props));\n    }\n\n    this.state = getEmptyState();\n\n    this.handleName = this.handleName.bind(this);\n    this.add = this.add.bind(this);\n  }\n\n  private makeButton(\n    buttonName: string,\n    primary: boolean,\n    toggle: ()=>void,\n  ) {  \n    return (<Button\n      key={buttonName}\n        onClick={async (e: any) => {\n          e.persist();\n          toggle();\n        }}\n        className={\n          primary ? 'btn btn-secondary mr-1 mb-1' : 'btn btn-outline-secondary mr-1 mb-1'\n        }\n        id={`toggle${buttonName}`}\n      >\n      {buttonName}\n      </Button>\n    );\n  }\n  private makeButtons(){\n    return this.props.allFoods.sort((a: Food,b: Food)=>{\n      const aHasParts = a.parts.length > 0;\n      const bHasParts = b.parts.length > 0;\n      if(aHasParts && !bHasParts){\n        return 1;\n      } else if(!aHasParts && bHasParts){\n        return -1;\n      }\n      const lt = a.foodName.toLowerCase() < b.foodName.toLowerCase();\n      return lt ? -1 : 1;\n    }).map((f)=>{\n      const includedAlready = this.state.parts.find((p)=>{\n        return p.name === f.foodName;\n      }) !== undefined;\n      return this.makeButton(\n        f.foodName, \n        includedAlready,\n        ()=>{\n          // console.log(`toggle ${f.foodName}`);\n          const parts = this.state.parts;\n          parts.push({\n            name: f.foodName,\n            units: '',\n            quantity: '',\n          })\n          this.setState({\n            parts: parts\n          })\n        });\n    });\n  }\n\n  public render() {\n    //log(`rendering widget, title = ${this.props.name}`);\n    //log(`rendering widget, value from callback = ${this.props.getValue()}`);\n    //log(`rendering widget, value in component = ${this.state.VALUE}`);\n    return (\n      <>\n      <h2>Add new food</h2>\n      <form className=\"container-fluid\" onSubmit={this.add}>\n        <InputRow\n          title={`Name`}\n          type={'text'}\n          name={`AddFoodName`}\n          value={this.state.name}\n          placeholder={'name'}\n          onChange={this.handleName}\n        />\n        {this.makeButtons()}\n        <p></p>\n        <Button\n          onClick={this.add}\n          type={'primary'}\n          id=\"addFood\"\n        >Create new food (over-writes any existing with the same name)</Button>\n      </form>\n      </>\n    );\n  }\n  private handleName(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    this.setState({ name: value });\n  }\n\n  private getUnits(\n    unitsInput: string,\n    foodName: string,\n    allFoods: Food[],\n  ){    \n    let units = unitsInput;\n    // console.log(`given units for ${foodName}, are units ${units}`);\n    if(unitsInput === ''){\n      units = 'defaultUnit';\n      // console.log(`check for ${foodName} in allFoods`);\n      const matchedFoods = allFoods.filter((f)=>{\n        return f.foodName === foodName;\n      });\n      if(matchedFoods.length === 1){\n        const matchedUnit = matchedFoods[0].amount.unit.name;\n        // console.log(`matched a food called ${foodName}, with units ${matchedUnit}`);\n        units = matchedUnit;\n      }\n    }\n    return units;\n  }\n  private getQuantity(\n    quantityInput: string,\n    foodName: string,\n    allFoods: Food[],\n  ){\n    let quantity = quantityInput;\n    // console.log(`given qty for ${foodName}, is ${quantityInput}`);\n    if(quantityInput === ''){\n      quantity = '1';\n      // console.log(`check for ${foodName} in allFoods`);\n      const matchedFoods = allFoods.filter((f)=>{\n        return f.foodName === foodName;\n      });\n      if(matchedFoods.length === 1){\n        const matchedQty = matchedFoods[0].amount.quantity;\n        // console.log(`matched a food called ${foodName}, with units ${matchedQty}`);\n        quantity = `${matchedQty}`;\n      }\n    }\n    return quantity;\n  }\n  private async add(e: FormEvent<Element>) {\n    e.preventDefault();\n\n    if(this.state.name === ''){\n      alert('a food needs a name');\n      return;\n    }\n\n    // log('adding something ' + showObj(this));\n    await this.props.submitFunction(\n      {\n        foodName: this.state.name,\n        amount: {\n          unit:{\n            name : this.getUnits(this.state.units, this.state.name, this.props.allFoods),\n          },\n          quantity: parseFloat(this.getQuantity(this.state.quantity, this.state.name, this.props.allFoods)),\n        },\n        details: {\n          calories: parseFloat(this.state.calories),\n          proteinWeight: parseFloat(this.state.proteinWeight),\n          vegWeight: parseFloat(this.state.vegWeight),\n          carbsWeight: parseFloat(this.state.carbsWeight),\n          fatsWeight: parseFloat(this.state.fatsWeight),\n        },\n        parts: this.state.parts.map((p)=>{\n\n          return {\n            foodName: p.name,\n            amount: {\n              unit: {\n                name: this.getUnits(p.units, p.name, this.props.allFoods),\n              },\n              quantity: parseFloat(this.getQuantity(p.quantity, p.name, this.props.allFoods)),\n            },\n            details:{\n              calories: NaN,\n              proteinWeight: NaN,\n              vegWeight: NaN,\n              carbsWeight: NaN,\n              fatsWeight: NaN,\n            },\n            parts:[],\n          }\n        }),\n      });\n    this.setState(getEmptyState());\n    this.props.showAlert(`updating`);\n  }\n}\n\ninterface DelFoodState {\n  name:string,\n}\ninterface DelFoodProps {\n  submitFunction: (name: string) => Promise<any>;\n  showAlert: (message: string) => void;\n}\nexport class DelFoodForm extends Component<DelFoodProps, DelFoodState> {\n  public constructor(props: DelFoodProps) {\n    super(props);\n    if (printDebug()) {\n      log('props for DelDeleteFoodForm: ' + showObj(props));\n    }\n\n    this.state = {\n      name: '',\n    };\n\n    this.handleName = this.handleName.bind(this);\n    this.del = this.del.bind(this);\n  }\n  public render() {\n    //log(`rendering widget, title = ${this.props.name}`);\n    //log(`rendering widget, value from callback = ${this.props.getValue()}`);\n    //log(`rendering widget, value in component = ${this.state.VALUE}`);\n    return (\n      <>\n      <h2>Delete food</h2>\n      <form className=\"container-fluid\" onSubmit={this.del}>\n        <InputRow\n          title={`Name`}\n          type={'text'}\n          name={`DelFoodName`}\n          value={this.state.name}\n          placeholder={'name'}\n          onChange={this.handleName}\n        />\n      </form>\n      </>\n    );\n  }\n  private handleName(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    this.setState({ name: value });\n  }\n  private async del(e: FormEvent<Element>) {\n    e.preventDefault();\n    // log('adding something ' + showObj(this));\n    await this.props.submitFunction(\n      this.state.name,\n    );\n    this.props.showAlert(`deleting`);\n    this.setState({\n      name: '',\n    });\n  }\n}\n\nexport interface DelFoodButtonProps {\n  allFoods: Food[];\n  submitFunction: (name: string) => Promise<any>;\n  showAlert: (message: string) => void;\n}\n\nexport class DelFoodButtonForm extends Component<DelFoodButtonProps, {}> {\n  public constructor(props: DelFoodButtonProps) {\n    super(props);\n    if (printDebug()) {\n      log('props for DelDeleteFoodButtonForm: ' + showObj(props));\n    }\n\n    this.del = this.del.bind(this);\n  }\n\n  private makeButton(\n    buttonName: string,\n    toggle: ()=>void,\n  ) {  \n    return (<Button\n      key={buttonName}\n        onClick={async (e: any) => {\n          e.persist();\n          toggle();\n        }}\n        className={'btn btn-secondary mr-1 mb-1'}\n        id={`del${buttonName}`}\n      >\n      {buttonName}\n      </Button>\n    );\n  }\n  private makeButtons(){\n    return this.props.allFoods.sort((a: Food,b: Food)=>{\n      const aHasParts = a.parts.length > 0;\n      const bHasParts = b.parts.length > 0;\n      if(aHasParts && !bHasParts){\n        return 1;\n      } else if(!aHasParts && bHasParts){\n        return -1;\n      }\n      const lt = a.foodName.toLowerCase() < b.foodName.toLowerCase();\n      return lt ? -1 : 1;\n    }).map((f)=>{\n      return this.makeButton(\n        f.foodName, \n        ()=>{\n          this.del(f.foodName);\n        });\n    });\n  }\n\n  public render() {\n    //log(`rendering widget, title = ${this.props.name}`);\n    //log(`rendering widget, value from callback = ${this.props.getValue()}`);\n    //log(`rendering widget, value in component = ${this.state.VALUE}`);\n    return (\n      <>\n      <h2>Delete food</h2>\n      {this.makeButtons()}\n      </>\n    );\n  }\n  private async del(name: string) {\n    // log('adding something ' + showObj(this));\n    await this.props.submitFunction(\n      name,\n    );\n    this.props.showAlert(`deleting`);\n    this.setState({\n      name: '',\n    });\n  }\n}\n","import React, { Component } from 'react';\n\nimport { log, printDebug } from './utils';\nimport { loginPage, navbarContent } from './views/loginPage';\n\nimport {\n  addFood,\n  deleteFood,\n  getFoods,\n  updateFood,\n} from './database/loadSaveModel';\nimport { Accordion, Button, Card, Container, Form, Nav, Navbar } from 'react-bootstrap';\nimport { useAuth0 } from './contexts/auth0-context';\nimport { homeView, ViewType } from './localization/stringConstants';\nimport { AddFoodButtonForm, AddFoodForm, DelFoodButtonForm, DelFoodForm } from './views/reactComponents/AddDeleteEntryForm';\nimport { Food, Item } from './types/interfaces';\nimport DataGrid from './views/reactComponents/DataGrid';\nimport SimpleFormatter from './views/reactComponents/SimpleFormatter';\n\n\n// import FinKittyCat from './views/cat.png';\n\n// import './bootstrap.css'\n\nlet userID = '';\n\nfunction App() {\n  const {\n    isLoading,\n    user,\n    loginWithRedirect,\n    loginForTesting,\n    logout,\n  } = useAuth0();\n  if (!isLoading && !user) {\n    userID = '';\n    return loginPage(loginWithRedirect, loginForTesting);\n  }\n  if (!isLoading && user) {\n    userID = user.sub;\n    return (\n      <AppContent\n        logOutAction={() => {\n          if (userID === 'TestUserID') {\n            log(`logout ${userID}`);\n            // try to be graceful without network connection...\n            // userID = '';\n            // return loginPage(loginWithRedirect, loginForTesting);\n            // at the moment if there's no network access,\n            // logging out takes you to a \"no network\" error page\n            // but if we're using the testID we don't need to\n            // contact Auth0 ...\n            // current workaround is to navigate back in browser\n            // to get back to login page\n          }\n          return logout({\n            returnTo:\n              window.location.origin + process.env.REACT_APP_ORIGIN_APPENDAGE,\n          });\n        }}\n        user={user}\n      ></AppContent>\n    );\n  }\n  userID = '';\n  return null;\n}\n\nlet reactAppComponent: AppContent;\n\n\nfunction getUserID() {\n  return userID;\n}\n\nfunction showAlert(text: string) {\n  reactAppComponent.setState({\n    alertText: text,\n  });\n}\n\nfunction filterFoods(\n  allFoods: Food[],\n  focusFood: Food | undefined,\n): Food[]{\n  if(focusFood === undefined){\n    // console.log(`no focus food`);\n    return [];\n  }\n  // console.log(`focus to ${focusFood.parts.length}`);\n  return focusFood.parts;\n}\n\nexport function toggle(\n  type: ViewType\n) {\n  if (reactAppComponent === undefined) {\n    return;\n  }\n  for (const k of views.keys()) {\n    if (k !== type) {\n      const view = views.get(k);\n      if (view === undefined) {\n        log(`Error : unrecognised view ${type}`);\n        return;\n      }\n      view.display = false;\n    }\n  }\n  const view = views.get(type);\n  if (view === undefined) {\n    log(`Error : unrecognised view ${type}`);\n    return false;\n  }\n  view.display = true;\n  reactAppComponent.refreshData(\n    false, // refreshFoods,\n  );\n}\n\nconst views = new Map<\n  ViewType,\n  {\n    display: boolean;\n  }\n>([\n  [\n    homeView,\n    {\n      display: true,\n    },\n  ],\n]);\n\nfunction makeDirectNum(val: string){\n  if(val.length === 0){\n    return NaN;\n  }\n  if(val[0] === '('){\n    return NaN;\n  }\n  return parseFloat(val);\n}\n\n\nfunction updateFromTable(\n  oldFoodRow:  {\n    name: string,\n    units: string,\n    quantity: number,\n    calories: string,\n    protein: string,\n    veg: string,\n    carbs: string,\n    fats: string,\n  }, \n  newEntry: {\n    name: string|undefined,\n    units: string|undefined,\n    quantity: number|undefined,\n    calories: string|undefined,\n    protein: string|undefined,\n    veg: string|undefined,\n    carbs: string|undefined,\n    fats: string|undefined,\n  },\n  parentFood: Food | undefined,\n){\n  // console.log('updating3...');\n  // console.log(`foodRow = ${showObj(oldFoodRow)} => ${showObj(newEntry)}`);\n\n  if(newEntry.name !== undefined){\n    if(newEntry.name !== oldFoodRow.name){\n      alert (`can't update name - use copy and delete instead`);\n    }\n    return;\n  }\n  if(parentFood){\n    // console.log(`parentFood is ${parentFood.foodName}`);\n    if(newEntry.calories !== undefined){\n      alert (`can't update calories - use copy and delete instead`);\n      return;\n    }\n    if(newEntry.protein !== undefined){\n      alert (`can't update protein - use copy and delete instead`);\n      return;\n    }\n    if(newEntry.veg !== undefined){\n      alert (`can't update veg - use copy and delete instead`);\n      return;\n    }\n    if(newEntry.carbs !== undefined){\n      alert (`can't update carbs - use copy and delete instead`);\n      return;\n    }\n    if(newEntry.fats !== undefined){\n      alert (`can't update fats - use copy and delete instead`);\n      return;\n    }\n\n    const match = parentFood.parts.find((p)=>{\n      return p.foodName === oldFoodRow.name;\n    });\n    console.log(`matched part is ${match}`);\n    if(match && newEntry.units !== undefined){\n      match.amount.unit.name = newEntry.units;\n    }\n    if(match && newEntry.quantity !== undefined){\n      match.amount.quantity = newEntry.quantity;\n    }\n    updateFood(getUserID(), parentFood, async ()=>{\n      await reactAppComponent.refreshData(\n        true, // read all back from DB\n        ); \n    });\n    return;\n  }\n\n  const food: Food = {\n    foodName: oldFoodRow.name,\n    amount: {\n      unit: {\n        name: oldFoodRow.units,\n      },\n      quantity: oldFoodRow.quantity,\n    },\n    details: {\n      calories: makeDirectNum(oldFoodRow.calories),\n      proteinWeight: makeDirectNum(oldFoodRow.protein),\n      carbsWeight: makeDirectNum(oldFoodRow.carbs),\n      vegWeight: makeDirectNum(oldFoodRow.veg),\n      fatsWeight: makeDirectNum(oldFoodRow.fats),\n    },\n    parts: [],\n  }\n\n  if(newEntry.units !== undefined){\n    food.amount.unit.name = newEntry.units;\n  }\n  if(newEntry.quantity !== undefined){\n    food.amount.quantity = newEntry.quantity;\n  }\n  if(food.details && newEntry.calories !== undefined){\n    food.details.calories = parseFloat(newEntry.calories);\n  }\n  if(food.details && newEntry.protein !== undefined){\n    food.details.proteinWeight = parseFloat(newEntry.protein);\n  }\n  if(food.details && newEntry.carbs !== undefined){\n    food.details.carbsWeight = parseFloat(newEntry.carbs);\n  }\n  if(food.details && newEntry.veg !== undefined){\n    food.details.vegWeight = parseFloat(newEntry.veg);\n  }\n  if(food.details && newEntry.fats !== undefined){\n    food.details.fatsWeight = parseFloat(newEntry.fats);\n  }\n\n  updateFood(getUserID(), food, async ()=>{\n    await reactAppComponent.refreshData(\n      true, // read all back from DB\n      ); \n  });\n\n  return;\n}\n\nfunction handleFoodRowUpdated(\n  parentFood: Food | undefined,\n  args: any\n){\n  // console.log('updating2...');\n  const oldFoodRow = args[0].fromRowData;\n  const newEntry = args[0].updated;\n  // console.log(`foodRow = ${showObj(oldFoodRow)} => ${showObj(newEntry)}`);\n\n  updateFromTable(oldFoodRow, newEntry, parentFood);\n}\n\n\ninterface AppState {\n  allFoods: Food[];\n  displayFoods: Food[];\n  displayFoods2: Food[];\n  focusFood: Food|undefined;\n  focusFood2: Food|undefined;\n  alertText: string;\n}\ninterface AppProps {\n  logOutAction: () => {};\n  user: string;\n}\n\nexport class AppContent extends Component<AppProps, AppState> {\n  public constructor(props: AppProps) {\n    super(props);\n    //this.handleUnload = this.handleUnload.bind(this);\n\n    reactAppComponent = this;\n    this.state = {\n      allFoods: [],\n      displayFoods: [],\n      displayFoods2: [],\n      focusFood: undefined, \n      focusFood2: undefined, \n      alertText: '',\n    };\n    this.refreshData(\n      true, // refreshFoods = true,\n    );\n  }\n\n  public componentWillUnmount() {\n    //log('in componentWillUnmount');\n    //window.removeEventListener('beforeunload', this.handleUnload);\n  }\n  /*\n  public handleUnload(e) {\n    //log('in handleUnload');\n    if (isDirty) {\n      const message = 'o/';\n\n      (e || window.event).returnValue = message; //Gecko + IE\n      return message;\n    }\n  }\n*/\n  public componentDidMount() {\n    //log('in componentDidMount');\n    //window.addEventListener('beforeunload', this.handleUnload);\n    toggle(homeView);\n  }\n\n  async refreshData(\n    refreshFoods: boolean,\n    //refreshChart: boolean,\n  ) {\n    log(`refreshData`);\n  \n    let allFoods: Food[] = reactAppComponent.state.allFoods;\n  \n    // log('refreshData in AppContent - get data and redraw content');\n    if (refreshFoods) {\n      // log(`refresh model evaluation data`);\n  \n      allFoods = await getFoods(getUserID());\n  \n      // log(`got ${allFoods.length} foods`);\n      // log(`got ${showObj(allFoods)}`);\n    }\n  \n    const displayFoods = filterFoods(allFoods, this.state.focusFood);\n    const displayFoods2 = filterFoods(allFoods, this.state.focusFood2);\n\n      // setState on a reactComponent triggers update of view\n    reactAppComponent.setState(\n      {\n        allFoods: allFoods,\n        displayFoods: displayFoods,\n        displayFoods2: displayFoods2,\n      },\n      () => {\n        // setState is async\n        // do logging after setState using the 2nd argument\n        // https://www.freecodecamp.org/news/get-pro-with-react-setstate-in-10-minutes-d38251d1c781/\n        if (printDebug()) {\n          log(\n            'reactAppComponent.state.foods = ' +\n              `${reactAppComponent.state.allFoods}`,\n          );\n        }\n      },\n    );\n    // log(`finished refreshData`);\n  }\n\n\n  private navbarDiv() {\n    return navbarContent(() => {\n      return (\n        <>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              <Form\n                inline\n                onSubmit={(e: React.FormEvent<Element>) => {\n                  e.preventDefault();\n                  return false;\n                }}\n              >\n                <div className=\"col\">\n                  <div className=\"row\">{this.statusButtonList()}</div>\n                </div>\n              </Form>\n            </Nav>\n            <Nav>\n              <Form\n                inline\n                onSubmit={(e: React.FormEvent<Element>) => {\n                  e.preventDefault();\n                  return false;\n                }}\n              >\n                <div className=\"col\">\n                  <div className=\"d-flex flex-row-reverse\">\n                    {this.rhsTopButtonList()}\n                  </div>\n                  <div className=\"d-flex flex-row-reverse\">\n                    {/*this.rhsBottomButtonList()*/}\n                  </div>\n                </div>\n              </Form>\n            </Nav>\n          </Navbar.Collapse>\n        </>\n      );\n    });\n  }\n\n  private defaultColumn = {\n    editable: true,\n    resizable: true,\n    sortable: true,\n  };\n\n  private lessThan(a: string, b: string) {\n    if (a.toLowerCase() < b.toLowerCase()) {\n      return -1;\n    }\n    if (a.toLowerCase() > b.toLowerCase()) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  }\n\n  private makeTableNumberForPart(\n    p:Food,\n    counter:(x:Food)=>number,\n  ): number{\n    const matchingFood = this.state.allFoods.find((x)=>{\n      return x.foodName === p.foodName;\n    })\n    if(!matchingFood){\n      return NaN;\n    }\n    const resultForPart = this.makeTableNumber(matchingFood, counter);\n    // console.log(`makeTableNumber for ${resultForPart.val}`);\n    return resultForPart.val * p.amount.quantity / matchingFood.amount.quantity;\n  }\n\n\n  private makeTableNumber(\n    f:Food,\n    counter:(x:Food)=>number,\n  ): {\n    val: number,\n    isDirect: boolean\n  }{\n    // console.log(`makeTableNumber for ${f.foodName}`);\n    const val = counter(f);\n    if(isNaN(val) || val === null){\n      let total = 0;\n      f.parts.forEach((p)=>{\n        const matchingFood = this.state.allFoods.find((x)=>{\n          return x.foodName === p.foodName;\n        })\n        if(!matchingFood){\n          total = NaN;\n          return;\n        }\n        total += this.makeTableNumberForPart(p, counter);\n      })\n      // console.log(`total (indirect) for ${f.foodName} is ${total}`);\n      return {\n        val: total,\n        isDirect: false\n      };\n    } else {\n      // console.log(`value for ${f.foodName} (direct) is ${val}`);\n      return {\n        val: val,\n        isDirect: true,\n      }\n    }\n  }\n\n  private makeTableStringForPart(\n    p:Food,\n    counter:(x:Food)=>number,\n  ): string{\n    const n = this.makeTableNumberForPart(p, counter);\n    if(isNaN(n)){\n      return '';\n    } else {\n      return `(${n})`;\n    }\n  }\n\n  private makeTableString(\n    f:Food,\n    counter:(x:Food)=>number,\n  ): string{\n    // console.log(`makeTableString for ${f.foodName}`);\n    const tot = this.makeTableNumber(f, counter);\n    if(tot.isDirect){\n      return `${tot.val}`;\n    } else {\n      return `(${tot.val})`;\n    }\n  }\n\n  private foodsTable(\n    title: string,\n    parentFood: Food | undefined,\n    foods: Food[],\n    viewFunction: (val: string)=>Promise<void>,\n    copyFunction: (val: string)=>Promise<void>,\n    showDel: boolean,\n    showCopy: boolean,\n    editable: boolean,\n  ) {\n    return (\n      <>\n        <h4>{title}</h4>\n        <DataGrid\n          deleteFunction={async function(val: string) {\n            console.log(`deleting food ${val}`);\n            await deleteFood(getUserID(), val, async ()=>{\n              await reactAppComponent.refreshData(\n                true, // read all back from DB\n                ); \n            });\n            return true;  \n          }}\n          viewFunction={viewFunction}\n          copyFunction={copyFunction}\n          showDel={showDel}\n          showCopy={showCopy}          \n          handleGridRowsUpdated={function(){\n            console.log('updating...');\n            return handleFoodRowUpdated(parentFood, arguments);\n          }}\n          rows={foods\n            .map((f) => {\n              // log(`key[0] = ${key[0]}, key[1] = ${key[1]}`);\n              if(f.details && f.details.calories !== undefined){\n                if(parentFood){\n                  let HAS_PARTS = false;\n                  const matchingFood = this.state.allFoods.find((x)=>{\n                    return x.foodName === f.foodName;\n                  })\n                  if(matchingFood){\n                    HAS_PARTS = matchingFood.parts.length > 0;\n                  }\n                  return {\n                    name: f.foodName,\n                    units: f.amount.unit.name,\n                    quantity: this.makeTableString(f, (x:Food)=>{return x.amount.quantity}),\n                    calories: this.makeTableStringForPart(f, (x:Food)=>{return x.details?x.details.calories:NaN}),\n                    protein: this.makeTableStringForPart(f, (x:Food)=>{return x.details?x.details.proteinWeight:NaN}),\n                    veg: this.makeTableStringForPart(f, (x:Food)=>{return x.details?x.details.vegWeight:NaN}),\n                    carbs: this.makeTableStringForPart(f, (x:Food)=>{return x.details?x.details.carbsWeight:NaN}),\n                    fats: this.makeTableStringForPart(f, (x:Food)=>{return x.details?x.details.fatsWeight:NaN}),\n                    HAS_PARTS: HAS_PARTS,\n                  };\n                } else {\n                  return {\n                    name: f.foodName,\n                    units: f.amount.unit.name,\n                    quantity: this.makeTableString(f, (x:Food)=>{return x.amount.quantity}),\n                    calories: this.makeTableString(f, (x:Food)=>{return x.details?x.details.calories:NaN}),\n                    protein: this.makeTableString(f, (x:Food)=>{return x.details?x.details.proteinWeight:NaN}),\n                    veg: this.makeTableString(f, (x:Food)=>{return x.details?x.details.vegWeight:NaN}),\n                    carbs: this.makeTableString(f, (x:Food)=>{return x.details?x.details.carbsWeight:NaN}),\n                    fats: this.makeTableString(f, (x:Food)=>{return x.details?x.details.fatsWeight:NaN}),\n                    HAS_PARTS: f.parts.length > 0,\n                  };\n                }\n              } else {\n                return {\n                  name: f.foodName,\n                  calories: 'undefined',\n                };\n              }\n            })\n            .sort((a: Item, b: Item) => this.lessThan(a.name, b.name))}\n          columns={[\n            {\n              ...this.defaultColumn,\n              key: 'DEL',\n              name: '',\n              editable: false,\n              width: 30,\n            },\n            {\n              ...this.defaultColumn,\n              key: 'VIEW',\n              name: '',\n              editable: false,\n              width: 30,\n            },\n            {\n              ...this.defaultColumn,\n              key: 'COPY',\n              name: '',\n              editable: false,\n              width: 30,\n            },\n            {\n              ...this.defaultColumn,\n              key: 'name',\n              name: 'name',\n              formatter: <SimpleFormatter name=\"name\" value=\"unset\" />,\n              editable: editable,\n            },\n            {\n              ...this.defaultColumn,\n              key: 'units',\n              name: `units`,\n              formatter: <SimpleFormatter name=\"value\" value=\"unset\" />,\n              editable: editable,\n            },\n            {\n              ...this.defaultColumn,\n              key: 'quantity',\n              name: `quantity`,\n              formatter: <SimpleFormatter name=\"value\" value=\"unset\" />,\n              editable: editable,\n            },\n            {\n              ...this.defaultColumn,\n              key: 'calories',\n              name: `calories`,\n              formatter: <SimpleFormatter name=\"value\" value=\"unset\" />,\n              editable: editable,\n            },\n            {\n              ...this.defaultColumn,\n              key: 'protein',\n              name: `protein`,\n              formatter: <SimpleFormatter name=\"value\" value=\"unset\" />,\n              editable: editable,\n            },\n            {\n              ...this.defaultColumn,\n              key: 'veg',\n              name: `veg`,\n              formatter: <SimpleFormatter name=\"value\" value=\"unset\" />,\n              editable: editable,\n            },\n            {\n              ...this.defaultColumn,\n              key: 'carbs',\n              name: `carbs`,\n              formatter: <SimpleFormatter name=\"value\" value=\"unset\" />,\n              editable: editable,\n            },\n            {\n              ...this.defaultColumn,\n              key: 'fats',\n              name: `fats`,\n              formatter: <SimpleFormatter name=\"value\" value=\"unset\" />,\n              editable: editable,\n            },\n          ]}\n        />\n      </>\n    );\n  }\n\n  private homeDiv() {\n    // log(`this.state.modelNamesData = ${this.state.modelNamesData}`);\n    return (\n      <Accordion>\n      <Card>\n        <Card.Header>\n          <Accordion.Toggle  as={Card.Header} eventKey=\"ShowTables\">\n            Data tables\n          </Accordion.Toggle>\n        </Card.Header>\n        <Accordion.Collapse eventKey=\"ShowTables\">\n          <Container>\n\n      here are the foods I found for you:\n      {\n      this.foodsTable(\n        'All foods', \n        undefined, // parentFood\n        this.state.allFoods,\n        async function(val: string){\n          const match = reactAppComponent.state.allFoods.find((f)=>{\n            return f.foodName === val;\n          });\n          // console.log(`matched food? ${showObj(match)}`);\n          if(match){\n            reactAppComponent.setState({\n              focusFood: match\n            },\n            async ()=>{\n              await reactAppComponent.refreshData(\n                false, // read all back from DB\n              ); \n            });\n          }\n        },\n        async function(val: string){\n          const match = reactAppComponent.state.allFoods.find((f)=>{\n            return f.foodName === val;\n          });\n          if(match){\n            // copy\n            const inputName = prompt('Enter new name for this Food');\n            if (inputName === null) {\n              return;\n            }\n            const newFood: Food = {\n              foodName: inputName,\n              amount: match.amount,\n              details: match.details,\n              parts: match.parts,\n            }\n            if(!await addFood(\n              getUserID(), \n              newFood,\n              reactAppComponent.state.allFoods,\n              async ()=>{\n                await reactAppComponent.refreshData(\n                  true, // read all back from DB\n                ); \n              }\n            )){\n              alert('problem adding food - duplicate name?');\n            };\n          }\n        },\n        true, // showDel\n        true, // showCopy\n        true, // editable\n      )\n      },\n      {\n      this.foodsTable(\n        this.state.focusFood ? `Parts of ${this.state.focusFood.foodName}`: 'Click eye in table above to view details', \n        this.state.focusFood, // parentFood\n        this.state.displayFoods,\n        async function(val: string){\n          const match = reactAppComponent.state.allFoods.find((f)=>{\n            return f.foodName === val;\n          });\n          // console.log(`matched food? ${showObj(match)}`);\n          if(match){\n            reactAppComponent.setState({\n              focusFood2: match\n            },\n            async ()=>{\n              await reactAppComponent.refreshData(\n                false, // read all back from DB\n              ); \n            });\n          }\n        },\n        async function(val: string){\n          alert('no copy for a part')\n        },\n        false, // showDel\n        false, // showCopy\n        true, // editable\n      )\n      }\n      {\n      this.foodsTable(\n        this.state.focusFood2 ? `Parts of ${this.state.focusFood2.foodName}`: 'Click eye in table above to view details', \n        this.state.focusFood, // parentFood\n        this.state.displayFoods2,\n        async function(val: string){\n          // view does nothing\n          alert('no view from this level')\n        },\n        async function(val: string){\n          // copy        \n          alert('no copy for a part')\n        },\n        false, // showDel\n        false, // showCopy\n        true, // editable\n      )\n      }\n          </Container>\n        </Accordion.Collapse>\n      </Card>\n      <Card>\n        <Card.Header>\n          <Accordion.Toggle  as={Card.Header} eventKey=\"AddFoods\">\n            Add foods (text input)\n          </Accordion.Toggle>\n        </Card.Header>\n        <Accordion.Collapse eventKey=\"AddFoods\">\n          <Container>\n\n      <AddFoodForm\n        allFoods={this.state.allFoods}\n        submitFunction={async (newFood: Food)=>{\n          // console.log(`adding new food ${newFood}`);\n          if(!await addFood(\n            getUserID(), \n            newFood, \n            this.state.allFoods,\n            async ()=>{\n              await this.refreshData(\n                true, // read all back from DB\n                );\n            })){\n              alert('problem adding food : duplicate name?')\n            }\n            return;\n          }}\n        showAlert={showAlert}\n      />\n\n          </Container>\n        </Accordion.Collapse>\n      </Card>\n      <Card>\n        <Card.Header>\n          <Accordion.Toggle  as={Card.Header} eventKey=\"AddFoodsButton\">\n            Add composite foods (button input)\n          </Accordion.Toggle>\n        </Card.Header>\n        <Accordion.Collapse eventKey=\"AddFoodsButton\">\n          <Container>\n\n      <AddFoodButtonForm\n        allFoods={this.state.allFoods}\n        submitFunction={async (newFood: Food)=>{\n          console.log(`adding new food ${newFood}`);\n          if(!await addFood(\n            getUserID(), \n            newFood, \n            this.state.allFoods,\n            async ()=>{\n            await this.refreshData(\n              true, // read all back from DB\n              );\n          })){\n            alert('problem adding food : duplicate name?')\n          }\n          return;\n        }}\n        showAlert={showAlert}\n      />\n\n          </Container>\n        </Accordion.Collapse>\n      </Card>\n      <Card>\n        <Card.Header>\n          <Accordion.Toggle  as={Card.Header} eventKey=\"DeleteFoods\">\n            Delete foods (text input)\n          </Accordion.Toggle>\n        </Card.Header>\n        <Accordion.Collapse eventKey=\"DeleteFoods\">\n          <Container>\n\n      <DelFoodForm\n        submitFunction={async (val: string)=>{\n          console.log(`deleting food ${val}`);\n          await deleteFood(getUserID(), val, async ()=>{\n            await this.refreshData(\n              true, // read all back from DB\n              ); \n          });\n          return;\n        }}\n        showAlert={showAlert}\n      />\n          </Container>\n        </Accordion.Collapse>\n      </Card>\n      <Card>\n        <Card.Header>\n          <Accordion.Toggle  as={Card.Header} eventKey=\"DeleteFoodsButton\">\n            Delete foods (button input)\n          </Accordion.Toggle>\n        </Card.Header>\n        <Accordion.Collapse eventKey=\"DeleteFoodsButton\">\n          <Container>\n\n      <DelFoodButtonForm\n        allFoods={this.state.allFoods}\n        submitFunction={async (val: string)=>{\n          console.log(`deleting food ${val}`);\n          await deleteFood(getUserID(), val, async ()=>{\n            await this.refreshData(\n              true, // read all back from DB\n              ); \n          });\n          return;\n        }}\n        showAlert={showAlert}\n      />\n          </Container>\n        </Accordion.Collapse>\n      </Card>\n    </Accordion>\n    );\n  }\n\n  private rhsTopButtonList() {\n    const buttons: JSX.Element[] = [];\n    buttons.push(\n      <Button\n        onClick={(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n          event.persist();\n          this.props.logOutAction();\n        }}\n        title=\"Log out\"\n        className={'btn btn-outline-primary mr-1 mb-1'}\n        key=\"Log out\"\n        id={`btn-LogOut`}\n      >Log out</Button>,\n    );\n    return buttons;\n  }  \n\n  public render() {\n    if (printDebug()) {\n      log('in render');\n    }\n    try {\n      // throw new Error('pretend something went wrong');\n      //showAlert('rendering...');\n\n      return (\n        <>\n          {this.navbarDiv()}\n          <>\n            {this.homeDiv()}\n          </>\n        </>\n      );\n    } catch (e) {\n      return this.internalErrorDiv();\n    }\n  }\n\n  private internalErrorDiv() {\n    return (\n      <>\n        {this.navbarDiv()}\n        <h1>\n          Oops! something has gone wrong with FinNeo. Sad FinNeo apologises.\n        </h1>\n      </>\n    );\n  }\n\n  private statusButtonList() {\n    let buttons: JSX.Element[] = [];\n    buttons = buttons.concat(this.makeHelpText(this.state.alertText));\n    return buttons;\n  }\n\n/*\n  if (props.type === 'primary') {\n    className = `btn btn-primary${spacer}`;\n  } else if (props.type === 'primary-off') {\n    className = `btn btn-outline-primary${spacer}`;\n  } else if (props.type === 'secondary-on') {\n    className = `btn btn-secondary${spacer}`;\n  } else if (props.type === 'secondary') {\n    className = `btn btn-outline-secondary${spacer}`;\n  } else {\n    className = `btn btn-error${spacer}`;\n  }\n*/\n\n  private makeHelpText(alertText: string): JSX.Element[] {\n    const result: JSX.Element[] = [];\n    let messageText = alertText;\n    if (messageText === '') {\n      messageText = `foods`;\n      result.push(\n        <h4 className=\"text\" id=\"pageTitle\" key=\"pageTitle\">\n          {messageText}\n        </h4>,\n      );\n    } else {\n      result.push(\n        <h4 className=\"text-warning\" id=\"pageTitle\" key=\"pageTitle\">\n          {messageText}\n        </h4>,\n      );\n    }\n    // log('display alert text');\n    if (alertText !== '') {\n      result.push(\n        <Button\n          key={'alert'}\n          onClick={(e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n            // log('clear alert text');\n            e.persist();\n            this.setState({ alertText: '' });\n          }}\n          id={`btn-clear-alert`}\n          className={'btn btn-outline-secondary mr-1 mb-1'}\n        >Clear Alert</Button>,\n      );\n    }\n    return result;\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDataGrid from 'react-data-grid';\nimport { log, printDebug, showObj } from '../../utils';\n/**\n * Samples:\n * https://adazzle.github.io/react-data-grid/examples.html#/all-features\n */\ninterface DataGridProps {\n  handleGridRowsUpdated: any; // TODO any\n  rows: any[]; // TODO any\n  columns: any[]; // TODO any\n  deleteFunction: (name: string) => Promise<boolean>;\n  viewFunction: (name: string) => Promise<void>;\n  copyFunction: (name: string) => Promise<void>;\n  showDel: boolean,\n  showCopy: boolean,\n}\ninterface DataGridState {\n  rows: any[]; // TODO any\n  colSortIndex: string;\n  sortDirection: 'ASC' | 'DESC' | 'NONE';\n}\nclass DataGrid extends React.Component<DataGridProps, DataGridState> {\n  public constructor(props: DataGridProps) {\n    super(props);\n    this.state = {\n      rows: props.rows,\n      colSortIndex: '',\n      sortDirection: 'NONE',\n    };\n  }\n  public rowGetter(i: number) {\n    if (printDebug()) {\n      log('in rowgetter, this.props.rows = ' + this.props.rows);\n    }\n    let colSortIndex = this.state.colSortIndex;\n    if (this.state.sortDirection === 'NONE') {\n      if (\n        this.props.rows.length === 0 ||\n        this.props.rows[0].index === undefined\n      ) {\n        return this.props.rows[i];\n      } else {\n        colSortIndex = 'index'; // TODO\n      }\n    }\n\n    //return this.props.rows.sort()[i];\n    return this.props.rows.sort((a, b) => {\n      // log(`colSortIndex = ${colSortIndex}`);\n      let aVal = a[colSortIndex];\n      let bVal = b[colSortIndex];\n      if (printDebug()) {\n        log(`aVal = ${showObj(aVal)}, bVal = ${showObj(bVal)}`);\n      }\n      if (aVal === undefined || bVal === undefined) {\n        aVal = a[this.props.columns[0]];\n        bVal = b[this.props.columns[0]];\n      }\n      if (\n        colSortIndex === 'DATE' ||\n        colSortIndex === 'START' ||\n        colSortIndex === 'END'\n      ) {\n        const aTimeVal = new Date(aVal).getTime();\n        const bTimeVal = new Date(bVal).getTime();\n        // log(`aTimeVal = ${aTimeVal}, bTimeVal = ${bTimeVal}`);\n        const aIsDate = !Number.isNaN(aTimeVal);\n        const bIsDate = !Number.isNaN(bTimeVal);\n        // log(`aIsDate = ${aIsDate}, bIsDate = ${bIsDate}`);\n        if (aIsDate && !bIsDate) {\n          // log('return 1');\n          return 1;\n        } else if (!aIsDate && bIsDate) {\n          // log('return -1');\n          return -1;\n        } else if (aIsDate && bIsDate) {\n          aVal = aTimeVal;\n          bVal = bTimeVal;\n        }\n        //log(`aVal = ${showObj(aVal)}, bVal = ${showObj(bVal)}`);\n      } else if (colSortIndex === 'index') {\n      } else if (aVal !== undefined && bVal !== undefined) {\n        aVal = aVal.toUpperCase();\n        bVal = bVal.toUpperCase();\n      }\n      // log(`aVal = ${aVal}, bVal = ${bVal}`);\n      if (aVal < bVal) {\n        if (this.state.sortDirection === 'ASC') {\n          // log('return -1');\n          return -1;\n        } else {\n          // log('return 1');\n          return 1;\n        }\n      } else if (aVal > bVal) {\n        if (this.state.sortDirection === 'ASC') {\n          // log('return 1');\n          return 1;\n        } else {\n          // log('return -1');\n          return -1;\n        }\n      } else {\n        // log('return 0');\n        return 0;\n      }\n    })[i];\n  }\n  public getSize() {\n    return this.props.rows.length;\n  }\n\n  private sortHandler(\n    sortColumn: string,\n    sortDirection: 'ASC' | 'DESC' | 'NONE',\n  ) {\n    // log(`sortColumn = ${sortColumn}`);\n    // log(`sortDirection = ${sortDirection}`);\n    this.setState({\n      colSortIndex: sortColumn,\n      sortDirection: sortDirection,\n    });\n  }\n\n  private getCellActions(column: ReactDataGrid.Column<any>, row: any) {\n    // log(`get cell actions?`);\n    if (column.key === 'DEL' && this.props.showDel) {\n      // log(`add glyph`);\n      return [\n        {\n          icon: 'fa fa-trash',\n          callback: () => {\n            if (window.confirm(`delete data for ${row['name']} - you sure?`)) {\n              this.props.deleteFunction(row['name']);\n            }\n          },\n        },\n      ];\n    } else if (column.key === 'VIEW' && row['HAS_PARTS']>0) {\n      // log(`add glyph`);\n      return [\n        {\n          icon: 'fa fa-eye',\n          callback: () => {\n            // if (window.confirm(`view data for ${row['name']} - you sure?`)) {\n              this.props.viewFunction(row['name']);\n            // }\n          },\n        },\n      ];\n    } else if (column.key === 'COPY' && this.props.showCopy) {\n      // log(`add glyph`);\n      return [\n        {\n          icon: 'fa fa-copy',\n          callback: () => {\n            // if (window.confirm(`view data for ${row['name']} - you sure?`)) {\n              this.props.copyFunction(row['name']);\n            // }\n          },\n        },\n      ];\n    } else {\n\n      return [];\n    }\n  }\n\n  public render() {\n    return (\n      <ReactDataGrid\n        columns={this.props.columns}\n        rowGetter={this.rowGetter.bind(this)}\n        rowsCount={this.props.rows.length}\n        onGridRowsUpdated={this.props.handleGridRowsUpdated}\n        minHeight={this.props.rows.length * 35 + 50}\n        // minWidth={500}\n        enableCellSelect={true}\n        enableRowSelect={undefined}\n        onGridSort={this.sortHandler.bind(this)}\n        getCellActions={this.getCellActions.bind(this)}\n      />\n    );\n  }\n}\n\nexport default DataGrid;\n","import React from 'react';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\n\ninterface SimpleFormatterProps {\n  name: string;\n  value: string;\n}\nclass SimpleFormatter extends React.Component<SimpleFormatterProps, {}> {\n  public render() {\n    return (\n      <OverlayTrigger\n        placement=\"top\"\n        overlay={(props: any) => (\n          <Tooltip\n            {...props}\n          >{`${this.props.name}:${this.props.value}`}</Tooltip>\n        )}\n      >\n        <span>{this.props.value}</span>\n      </OverlayTrigger>\n    );\n  }\n}\n\nexport default SimpleFormatter;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Auth0Provider } from './contexts/auth0-context';\n\nReactDOM.render(\n  <Auth0Provider>\n    <App />\n  </Auth0Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}